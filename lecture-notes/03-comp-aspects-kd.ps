%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: 03-comp-aspects-kd.dvi
%%CreationDate: Fri Jan 26 11:32:12 2018
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-Bold NimbusSanL-Regu NimbusRomNo9L-Regu
%%+ NimbusMonL-Regu NimbusRomNo9L-Medi NimbusSanL-ReguItal
%%+ NimbusRomNo9L-ReguItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips 03-comp-aspects-kd.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.01.26:1132
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585DE98B96A3F7E36CB37CE1EB1D
11E2CBF99F15F7C116DB632EB22A6C7A3C921FF716E9753F4068CD684517F327
58E8F5D1A42D40CCFB40C13249D90B00E1FB1F743CA143C191A39BA398B920B5
F25683596AADC66BF831DB6A5435937A0B37B5F1BC381AE33AB09D8ABD419796
3F247467259BADF061BF5F70E4BA0CD7D2227F5E20A5428CD87225C7FF28FDCD
4FB898A052A0B1A17FE1A99D03F851BF811AAE848B8F7F77D5075DEAF483E279
574CA2D0D685C7D7F56248A987EE709782646D145FCBC3309933A1310FD71115
A0B725E3EFD5C01936F03C32E26E9752568586AF8F68C03A0B150E234D3A5C32
A6EC201192FFD8BEC784F4132DEAEA3D477C0433ADAD9AA04C4B6A9E56344507
DFC06A839C74458AFE461803EDAAD78BF5F7A738766E78C1AD7686A3C54532B0
7F8856E3D629286E320BE4C2E6FCB731F6D39DA40442E648D10AADA23516331D
6E99469582FAC2901B629CE4137326A88F6E1DEC663321202D699E63A013EBB1
69289FB9333B6AEBEE1DE23F9179E939E8E50F7BE4118ECC2CC40F691AE9748D
2DD76D9D1546488B7E05ABAA458C5CE797A327685A564C11295A73FE3649A983
08BC5906C1DA356869FEA0B72860BAD93A2E414FC4E3FA2AD4257AFB55B24A45
11083729A0C108D036C458F52CDA29AA7C0FE58DFA6FC3880C639397437CEA43
184F519AAB4A64AD74C3B178FE624B1AED5AA201D467D1E213B2A0E953A7A38C
C26BC8DA4C262467AA66CAC0D20720013D66080CE87635A06B7C74B7991E9F89
08B08E82821E5CF5B956BCDEB0F3292A8AD108AA64FFEB0CC4106C98810FE4BD
687C783B27501C603CD989F14A2A0A56807471BF18E1DB518117AD2000148395
45B1078F38D728422AD2BC39DCFBB8B36B101C9796565869F375D09239378C83
4B1060E5A374553F2AFCB00F41988BC06058B75924199D0B7A5547947DC1BB9D
24782DA5E78A0DAD6ED1D2D72D9F57A11CDC27CCFF840792065DEDBF4E547F47
6AD6E7850D0E405AE6523DC0CBB36047F5E51C0C1FBF1F6C230C1C99974CEC3D
5F27E9BBB5BC790D93B0A8092E176ACFC8C5A4031DBF1B7A9F86E317AE2B86DE
255EFEF62BDD15971099A370AC1D9CCC817755066437CB4D6BAC950F9B23CF55
920502D0BCFE62BC6B913DF6F0E6C58CB16F5F9D17F3A7BCC6E11A0857417AE6
9B430EA73AEAFBC5D21501C1C33DB2A5F75EA8637CA0471BA96CC44420DA9CEA
AA07D3BFCE05B6A2BD017FA8AB3942D6C7BC76DDFF2B9DAB14A41206C3350B9D
FC1DEC1CA5705E0ED8B061E82530D793EEC3E5EFA20896B346FCDBFFF132BC70
894EDD4B14385F5BF95ECC01C22DF26CBB0B61CBC0F205D27CD5C774B08A3B93
2FB2070F300F7B9356C1E1ED8B2C0334BE3D572A1C405E1F86676418D058D7B7
A624A24E9ADD421346F6422F76D7C83CD6A4A1BC869BCFDBDCFA8C381B3D5848
2A0CC98BE92B1674DD4546756FF8D79D108816E9072BCDD8841FD2B802EDE74A
BE7055F5E16396DBB3F64411CA15D0831E8E3374981B68564692AB79DC4CD406
A5EDCDFED94DDFF1A3C4A6E985ECA49F359E15F1087A3B12C8C7562FE4F387C6
C79B00E2CFC11D750B8B9E9AEDEE3B272FBD24A46D9F5365A783EBD5BC945C59
5C9F9AEA73FD346974FE59355ACB996BAF7CCF8E9071B1AE6D68B6F7CC89EAAF
585B97EE0A1885CA97B6B408B1B14A0C43F5BB9FA2C36526B2411B2B72CF3517
282835B8F620A0139D762DCE5166E3F4D34E56D7F9F8BEE30173D395E1D94132
0BA2A64B42C1373ACFF3D723DE81CD6B0FF6176C13E0534B375CDE3CA6DD7141
7DFD528B2FC34AB914C268C8874E34F01A8F3E17FED059A8385466AC97F5F8F4
361DAA66686A89E3C4C6EA4802C331780943D1C667EAC9A01B6176AD76F2D49B
605961485103BF3C2DD396E682EB072BFE1C087CF443323DFF913D8D5F9B31D9
4A995E77D369B625ED1FF636704F0E95633C6E65A6507983B4F3E713B1FC47D9
34A0CC5F403CB09F7FA95067B190C34754723F1047D67E7C3EC5AF5AC5129768
B3311CB8FD43FE9FB48E0D17040AAD4A686AD1BE5D0154F95D036444FD4729A4
9BEF40BEC4B6445E56EDEB5A05E5F278373AC45BC24C37BB53724444E8B8E951
3A5DAE915823EDE5E148B56F328D5C7117C9FE240A9BD28E1901A4FA698D6569
6D228555A71ECCF3C5282908CA315F95A1A82145D774FB3508D01F3E89F8683A
835B98A1D4AE5D9CA434A535EEA888124AEDCE6D7DB100632A4C173F4DE74A32
CA1514B3EE8C410C816ED040C9568CC2EFE4A607C3EB4A6C06AD5F9D6D8C91D1
04F883777AD1B0FFD5C8C14C34C3638F11A67354B956C3ECBA3C55439ECAC397
0EEB606238728A9B23C8C0EE5E1CDE0C9307615D2E9E878FB8327780CBC611ED
14FB2F017FD1CB7E1E23C1459E37857DA08C53CB64A7A0812D490A1C35149937
E5B2316A409CD6AAC616784D91B39AD85200341B4B33127E9CB20DEE8C41911D
8273D0046F9CD7B7528EB0A09D458A3180E6B5584FA1EE0C760AC0168ADAE8A1
716BCE87935FD90668FF86A9BE37F550F087451064170709309927495921CA39
D69ECB4D89234D985FFB14ECE4D883D5DC377528867B9CF1B3A173A2633353B2
B6E338A248AB07BDF2857DABE28C47EC48B197A2053EBD8F16DE6F3C39C12888
2F638E11202084B55DFB7916E090316B592E2B90ECBE12C65CB330E70410E4FE
9A0508AB7A53CC8B7F7E2573E72E8E01047182433D2FAA862C2FACB4B00C9278
BB0428971CB8DE2929B9E854081E336EA421DFF8B09E4E9FB6382ED44FF2457C
B2EED69D6729C0DDC3303CC260DB378C746C0291A8C168107FF306F57EF837E1
E86B0CFC7C896BFF8777B7BC35B1C2F28EC1FB837E66F189E9D7A4308E558179
EB056F47DDDDDAC3DCE791485C06A437F92A9EB61CF4119A5F0D2C38BBF717C8
4A40B4EFC595D901F781BF9D17DF6ABA30FA6678B6507819CAA378F3BB615CDE
0B28C23837424689D3902F1B9F44A52A627DBC1F119BA6BEF42392A08E129B01
4465B50CD7EF528214F30327A1425B6F39E58816C7A84839C069CFBB069C10AF
003828D7316BAA58EA64499CEC98B4259A02B03655E8D25D6CB67B92DFD2184A
508BA545215157AD16CCAB730648627C9A81151D88FB40604EF0898C52BA94D8
5B14E8DE7FC8EDD79922578A095F71EF4FB9E7BC9FC0C1FD977263B0494BBA03
B17C8BCCBEA16A60ADF3A37D0E0206E56D3FF6111A501180C56DF1515BE3D4E6
9D414F7457EB664B2262987249C560A78F87D37906F1DF8F7304AFDDF88F35E1
F428DBE74E7042766346E9971FA87911950FD65E90E3CE3A2F684C07F2022B73
8BF2A360A33A473E6D63D300577B2C99A5F45D03C6CCEC9A9EB6A509DA1BF854
E00955BF51B3D1E18EDA5A3E75F00633AC163348296494D8126EEE532651E24E
1C968B32BBC2E17B75CAF20CAB7938D921D33AA4F0055B9EE8EFC505738B7A2F
04130B06A0276FDF1F14883464EAD10C6F0DDF513A630E0133FEC808630E4B3B
D887AD444210B3B5205B17654B523F126651F8DFCF74E04711BE51509F685173
FC15F66C32903C57FE1895A8B894985A319C61569E9CD20A925091EF6C45BE6D
1FB3A56BFE046BB5975112E7DA11088198D278B412D3972C650B4BB13C24833E
9E8274292FDE7589F7E9DFB270A30A043C0D1793131AEA10EF775A078B1FEB1B
F03EB3579C6C2BF822EACF42EB23773AFD894FA5DB90644A3A2A34D1202791CD
54702D07F21F9592EB7D34C1B0143C36A803A9CBBECCC7305AF0A4793504B223
376B60F8D136DB14C686330F3CF3E6698EE25EF3C6D9BF8BC7619F725022298E
2A9157AF1175AB47229D0F348EA969DF366D3E1141C63A6A9E43A0310316F782
11ADAA1AA9954C8C41A1A65893C6DF9E1FD89F2F8CEEB870C409ED13E78B4C98
3C836C7D068DA68BB2A3832DF7465D8B9DC793D2E1059FC6BD621E73D1924CA5
03D6B5CE78F960701F4F7C66B611C857E447D2A8A324127CAD983673AE86B7FF
22AC662C9294EE642FA485085C71024C2FCB25180285DAEDADA78EFA52369964
2D9848ECCA8D68F5D26FFD55E440F46D0A650CD3CEAC9BB4D11F9E86F96FC695
B8DDE30A7E70756B747F197C1A3A1F1A743CCB30E35D159521D62592627B254F
A159335DFCACFDBF60C8EAEC809B80D04EC057C0BA0DFF5723419EF5CB55A481
C7369C9BF4D1EEEBD3D977E92CF21FB067C7AE272F8CF645E3DC62C562FFC239
CA000B293D12E5C0A05D8131001ED8DE9F5AF6BF7F6AC03676C9DFCAAEA73112
3F77DA1E64AF59F2C89F6914EF7EACC2A55D30B579734A0B69A9A6842383A33D
078EF104ADFDC26547760929DED53CA4ECE95E914466BE8C81C6F483D9164C87
B0C6BD0CD8EA7C826E2949BCC6A8190D562F7E7C8D4F460633151C8213A852C2
656E6F17A9071E5F7A0E706CA636FF5996EE9A565B2158A2AE9BCAE9D8087B5E
3AEC75B5004CA57600E1026736DC4EB267548F4DCE33F4B766CC121E4BE4531A
04B24F2305D2E283C0CC2A6E4E99ABE3E4377A21B3FB941D589FA345F7943CB3
26F29BD41858AA70AE9037BAF2779ED8034237F25540F71DF8165C77C969975D
ADE58C1A863D53B67DFFDE2F4865255E523315DF7C66D0B692FE7C9CEED9A54E
E6607CA1540B90A98A5ACBBBB7875513630995A2371653F9A9B94A9353307B57
2DC5B30B935224CF54B6CBFDCCD8BF498D7D2063B36A254B591BE8676B94CA89
FCA1BE18CE14A253E9C563E8876609EEB08A6826A396B08C996A6798FA7BECB0
AFF818B1CB3572CA7C2A2A40FE085B03C5CA70E0DE9B15AB8124632F8158DF36
FFF0AFE17E2E6FBC997E8A66669199CA6E2DB28417C56BD90E5D14B07EB76AAE
17DDECA6272F69DAE28DF0FB77F883F2C9D3837DB47AEF59B4A7573690590DBF
DC080D88BE8F6B9D44F26CF44EC5C331F591447386C03B24ED3F1DA46D6B6418
648B2A46F22AB4A1FBD35E3E7F3ABC371168A01DC4C062114CA38ABA69205A1B
83788EBA038298F94DB433419DADF991EC462AC5D6DC1A665719507507EE90AB
7168F3D6D7427F5EC0D5D9CCEBBD7DF39D294BA0F0D05C6C5A4AC9E21CE05CB9
27531DD1B95D119D1A7D2CD06AF7353B0D1BB91B3414A17C4B87E63141F04D60
05C6C55AA2C6BEE3B0DC4F2CD819B817C196CB5A2FCE921D505A0665A04BAB0B
188505175088F0F986B8D87F1908F94927BFD060CC594E01D7232A2F38FA8336
ED71848D2E7CD6B766D4F3E1751C3B528D02BB85D754283F477CB6D50EB70E01
11A40769D2413726DD6BC9DABFD9997F399B560242E8586899DB2CAE37F61634
F719BF043B5E1C281C1DA8BFD232678A3B5AF418CF5ABA5AD72CFA4FAAF12D66
3F23FB0DC8D18E073B9A63239BC02BF0745B395121097F0A703D1728A1F5C2E3
68D67ECE84AF7498BF5D6CFAA3AC0D6A11B6BE79F4DC67215E09F395A7A9484B
CDBC6C17F7438AEC4A81493384590B6E22309664F7C902D8A0E08C14F18731B6
9686232BCFA1F415E8618173B619E0D54443FE164A6CEEE97205BA2509D15DE6
5B00A629EF39EEA256B60A7F40E6350594AF310CD49418F94A8766BA78836F74
CFE9E43CC260FEEAECBE17C5683BBEC2AF894DFD80F322984C3F7B4C49F272E7
E109FE0ABCEA24D63DBB3B23C2D301088DCFDD26F25590CE4474928ABAA25D71
F5DCDF2CE08D95FCE432FB942CC68B5CFAABC8AE0825DDF8C8831A012AD0E438
34F643C8C3F4D9AA9E3DA061DB3215C8DAAA018797383F9413E1A4883594ACD7
CE55B21C0705D40952C838FF370A7285C538456FF053FD4AEFC18A5EED2B5EC9
43A3500F0A5CD6F682A02AE66A478FA7E07E1E7B9CFE8761C57477F7366D6DCE
A121066BBF68E7FF36027417398FBF27FFDEF05751661689591342C4ECB73A3C
9B5FBE57817A80FF3B4169AFE951EE366495F4E6DED831F059736711E088FBDA
E805AB5ADEB60FEE09F826DCF07D76FA46645F0D700BE85D676051908E55A864
FB37E8F70BEB5E6395CD7C83F9931A79990298B08DA5149E3FD6CBE8405ECD45
1DF3F6C5D12CB95D3DC2178422A46CA54A7FE604886A269544DE0EDDA5018937
97CE29995D5C6A69F114C13D06A414BB9D434502EFAD841F0DDAC1AB91FA8536
BE32EBCAA12C5A7FE60456189008F10D3367C6517868F1EAD10B12C4928ACB38
4EAF7824CD46CEA1B1B9637971E4247095DFC52321F2C9EA8360952D93E3AB87
C662A9F34C7BE2DC110F62445180F0C13ADCBEC519652AF9AD5330B3DF639AF8
069CEF3AC829FE391FD1502E92D31381B80021E5ECB0A02D9EED192622B978FC
DFB064BB5E6F16A2C5310F9714B44191E79C4C0B26C9D207751DE0BCAD9F33BC
20D5226F568BA8A3E67E3E20D3717C474DCF9373DB59F759D64D94EED763CBC6
F2AC703F5A22AACCF34A690E853D67C8976F89FA1FAB1744FA902143119B7CAE
2C66BA17DF9F60C8589205DEC9BC3567F3167FDF3F683F0CBA21140D7985778A
A1C06ADF0872780DF41C23FF6E5F75FE68E6F401A803F7647CB048849D500A02
469EA9A3543EBB5F465C4FF633748915856FE50D44DB381DA6D080DB2513A404
39CBAD9485831A3D735F6BAC482F2E48AA56435ABBD7EE9A4DB1CC10B49A751C
F71C01DBF65AEC86788879BD844568BEAA9ADAD5C0C29AF763915FAF92CCEFCD
75DC809925E63162886709B5B9EDC8ECC91E16D6BAB3303B93D3AC007DAD7324
04D9A4E2C729D05ADBA17E7A06E7D0F68AB8664CD7CC147276F5D8EDC26830FD
AE844B1602D15ACFA4688EDB158947CCF68C6CC1B7EE35AE19AE619F5CF7C0B8
A73F7C34829903FBF1D34D8D6337A32D5F06CA5583D631C09BC7C0F4C7A42173
4301813921B971F6B6E7B41DE48178B07E1D0E4A13B262BEA6D20C60E46F570E
B7608BA7717DB85F544A4703557E5F304FF4832B592CBC9809C64554F1FC1302
82C34A9C5D59B4EB9149B34723D8B92C4B605F0C806A7F79AB16E2AD8B7BB438
C02291FE90ECC3A425F84078E97CE2D103ACBB431AA70981E77AA56F47C928CC
1E7798C50DD6AC3448BADA5C848043D90BF36D11669B81EAA99EF99F9440AF32
43B714091AE0D2474D98B7555DABF808732D48ADE43526878D37BE19923249A9
0EFAC5602EAAFD05991D429F04724B370DC2CCEAD51C32D44A0FE7B27C14E156
2F0E6567AE78FDA610752B4CF96ACB7CFB582615D9EB7D7A8DCCD7F24C9D0C5C
50E0ED5307681E4B2FB5AC0B781B97911E83C48F9383CE022F614C08EF8C4CDB
EF4D6148DB6392EC7250C467A3FC4FBAC0E247CC0DD8F446C315CD5A7463F182
9F1F8482BD326F2DF4B16CC41E4C9FB1498EBB9CA680A624C20CE95AA5B5D4FA
8B01235A7C172ADA05D662F7C17BCB117324A38F892667ACDC060DCDEBBF1563
08B6410AC72DF70ECB8A2C847DBD3E2E09E628BAB76912686910AC72A25C104A
847D9E64C52991870410BD2BCACC65729E0DB483D932CE567DA53153A03D174F
F97EFB3EF097D96756520BDB620C95C3F4BECA74118C7236716F07552439C6D0
9DE08DE25D59C307F92EBC8912C23E683DEFEEB6827AE3B5A7EBF8487D84801E
F7DCE6F25F483E7555F3A24D2701CFCC622E7C643F00D3808EFEB9E54A69C5AF
802CF1EBFB25260487551E150BAE5EAA9CB6A7614941E5A2F473A7FB099D3D51
EF85BE0B5CB46CDC95C2F09E621DB4AEBA91888FBD4734ADD05ED3388498C548
0803414679A145541628F6DEA543171844C4B17BDB6C3D1F7420ACB51B009666
6727E6C21ED7BD158B11324014B4AD13F8F95AB9B462F7A5950046C9C4A8CFFC
760C96C7B9CA647E44F7C808B103D657353EB568DBB66593DFA98800C31CEA9A
F82AE2AA5CA952A079E1E455DFACFC5615DE7F95BFFC577CEBE32A424A9F151E
017FAB198C791870D71E5ADF19506E6A986394156D044658563873D49AB0B965
BEC1A8B100500554145125FB0FA5867D33CFD614E6D82DF617F77EAB048E71B5
1B3BA759DE18247CFE6240C82AAF61A7D3FB6C48487185D76522C963E61EAE3F
BA7645AB573A5E5EBF40C14681BAD1AF8B3795AC338C57A05C4E5D56A4DDC468
1B41A253650906A5B00ADA8E33534A2FD470E8459380D70B0A49019DC5A3A1A1
BE80ED8FF0A9C509420006D2229CC525B1340A8065F025842B0F91F6E4080B3C
6D4A4A49F234759B72ACD9AB39711B96F7131CD613A81435A6B1D98A9B0B706D
74BCE4449FC3BF0ED249587B3A9D03D1902F71F70C307354230A96B6C00CC397
4AB51B6A4D8747B54B08B26A2C3DC344DD33C5A7249960384EB4B84EC4C71E91
D872B1DB3B7EE4140FC5757E31B68BCAB081F0DFD79ADF07540B3D0A896037FD
1912DDF6CFDCB995609788A176928BEB2B6E60053A9CB400E09CAF55F08D65A2
8FCA65062E70F4703BF9CB25E1B6F5F8A48A9C98B34D79C81D40574117146FE6
2668166D5853E33EB59B3FE4A32EA3800CC8AD97D8509377B120EC195D43DD29
8F750556198C024A0849365351AC2F40784356690DDB982F55FEEFFCF946C6DA
DBC6A368AB4B91945C512870DB25935546B48FD61007E164EB997BF3CF980657
CCE5506A7AC923DC5E300B27F323824E5C1774101F055F3D4BA0AE55E1E4A6C2
0556D7824A6D491E1E20F202321AE8696A2B452CFB700401591426F3436DAB7E
1F3B2B1417451DF6A798A1CDF1DD1BC631FE9FCBB2E15384FD809B87611E6673
959E65A2C03CAF9D5A6FCECD88CD1EF151CC54EEE1BA19490B852205E640375A
9CAA5245667D057C95F2CA95993E7CDAF15EC84A70F9961A02B3505740713C4F
A9E8F548E0287E9DDCD2B7C56C4F150663791A581A3B79CC12A129896394540F
F69162AC39AA57AA7B2DE1925ADA85B36AA1B50E2607945A04DF54F2561A784F
A50039F2FC3B39A9F75849AF4F725E4023B8EA6D147D264E48E69939FDF48DF4
9CBE4C7912B4D40548A9CC009B87404941B1C18BF3AC52BD2CD6DD01EEBDD461
895B0CE67EE0F3250A0626C15B61C06F10216E76CB6598DFD42AA22CFB939A91
4FB803C324817FE1B3F9CE0F253FB6800D5D6BB753CFB933FB9303AC193DD510
2E8DB6FFC8039417A0D61750E1EE624DDF01F20F74ADBE880B8E044E4662EF0A
F221544DE5DDC61DFC0CDB4F148BDAFA2B81DFADD8E946FA4ACA6F2440D85B2F
21076B58A9D69B6A72F68743A3C4DC4D7CD5BAFAD896B5C11F9C826DD1B4D5A1
763C560F54AB4521EAB14A38B3D504EE78BE77AB036D3DF8249C4B1B0A47FD38
6222462A476A1F590B805B34FF465AB2A6DD504A9B6AD381DF9BE7062DCA9176
8C2C9CB6EE2741F28F26C0F4A25C9FE3110CEABF5CE69F5813A5220097640011
752A93E4D910BF8471D2E993F5295765B30C608F0E299AA0B73FE1CD1B976760
42C994F6F37337D23D1561064DA0D11E0B77E14368DBCD08AC8E9C54E60536D5
6FE351BA98EBA736BD0634EB7975DAD63C828C646D4C149AA3C781D62E0D6FA8
BD361709D9DB48BA9CC486E86440E577566ACCFADBC48C07DF780F4A128D67CF
8C6CF6DA6E2AB4CF235851996653FC41AE6647582C86E8E86E8E1CD3C812286E
61A2EA70E3408201C050045D43F09DD347A9FC3BAD8D706B52AD6BCC00D8B034
5F88C65841E9EFBC61E4D60E08E507D18B4D38392BCEE6BFF6E6145B43A93708
C8DC4EE3BBF79CBD88AD1B0DF15D389E95A545DB5385B617D1BA13BE30F10301
9B33696A456C0C24BBBA5261FA5F7C300644B0A2F13CA204AC780C5DA00E9C36
BD39BFA6EF38C8F819705EF0B6F734A38D913FFC1CE67055A7677D34BB5DF170
0889DFA6324220AB444D338B438CDF5FEBD36C6E6003BBFF539A3C802E0FD228
1FE5924088A7E40EB990C79865C06F84A291CBEA3D12914467FAD22B1F03185B
B2AED2FDD731B8249E51C8D9EF71F1584D464719ACA767E737631FBD20E66AA6
CCFCAA93724729F5B7DC7501EA98EDE149E70C4F43704795A53EE63E22A71230
8D378F836D1E3F2395DBB8F87DD4F4407C090E9622E03FB683C6B919E52DBE33
CA53FA46764EDC03930F36B48779EB6BE64BF1D02BE136370AFD1B6BA60D818A
9D42CE9F700512C58E83F41CB12DD1A03BFB0FE345742AEE500A1586D09E5012
ED3007EC9C50B78FAC6A62D762D7C0F6511E83A30CF00E1FA2836526AF417FE9
8E2FBC52F3CB5C7C49D40D8F7C6D4998B27891DA888EF6FF2487232727706C07
A3068BA1ADA1B28A736584C09911C4C19066A6FF87BE04D974C5EB7ACA5EBF84
8195D5A126F5C4D7FE74AF0B203991892D58D6BA9BC3F94D0F2461C1F7FB34AE
07B243C79CE0C73076810D2668056A8B4B9471C01861165AF43422437CE18ED3
02461B8561E843F19D27BAEFBC42570D9E93E5FCB7FC665D6F86C4640222DC39
DC0A85E387325A0169B274E248DCD4BC7ACC3E5CD5C3A1249B8742E631854A14
E422DE08D99FB5571ACE864A848BF03ECBEAD59B8EA5F7456870520951272E0D
09083ADA0051883F46CDA0F74E900CFA9777D8EDB2DE62DBFAE268EA7AF888EA
048EA56A34532D3534E2E5FF3489F7FF03D95CFE9E2FAE3245F40EB6241068F2
97B46059F3B1B591E3A80CDD6A78ED294D4DCFBEB45550B0C5296AE847C285E9
EFF89A5A7EC4E882CAC2DD96A3E4A5197BB7EE2332F7E4B3FFC5A421EE6E8A11
58B41B43BA40D8225A26FADCFED475F691B3D086F7A3D5741EB51E3E1F653A32
D429EE3C13E0A42D7FCF406E57AB831C7E9E7B1C8C5C7D225023470E66706119
8CB80DF29A0A8925797650789F04ADCB4664B46FFFD464BC2933ECC4023A7681
AD54810CA734ED2C8FBC221BDDF57BAFE9F465CF955F65F1167BCF60444C24B8
D02EC70094D4F87AF3A1DC40D33E682D031CC6197AB0EB25DA4EE7BDE8271C07
2FC94777B0972E944C5CFA9E05493A448CEF20666A966919F2A04EFB22CCFE3D
693677EBE7D4B4DFE43FE91DC7083766034A8D58BD8A38431CE2A931130385F1
007B636ECAA78E9E8826EAC8BD86F6970E090894B2682DF46C8A208FC3526EB3
439BC18506278DBA8B9B83BCBA110E2AD4B9511235A3BC84A4B0A07BE8EFECEF
3E23FCC8A4FBBB6DFBB60B0390C76B861090AAA550AF108ED84B38AE43B18E66
39621DB7D60740F7D77E59C15314A2E5480DF064B3F2E95B8DF74008A13855C6
72715D3A905420A9B778192534E18D5C675B5A28A40EB0B8321F42F3FE40ACF4
8AEE42BAF0BA0597687BBADC3DBAAD582B648706ACC6CF22194ECEE136427FA5
8D105E59BA9DC2872CFE21303B7FA40350FC51691FA2C6C833F594D74045AD0E
64465578D0C96F66ABF9D0EE957788C1B07023A72F967BCB97046EA356C9C89B
2F979DAA519D74AD522C39951E27F3B26E4EFE355F0A0219D48D74707A3F1C53
C816B8F1226F49212C6CAE34AF40BFCF81505DBF920C2B74D07F328438AB8CB5
D71E47F281A89415D1F5CFC083A908241AA904952E4837D8FDED4B72B5E4D5C7
D5EB73D9D9F4C08C5A3E5A1ABAF43DD3DD253DE875E58BEDEC6644BFEFE3EAFB
169059AB4B73559BE69C64A5BC28EEAB64F1E6737DF1B924115BF080A7A4E885
05D3172B17081310D865E79AD173750BAF2A732CF26FA55837EADC18D5CC6D03
89C8818758C9B2B0265600167368D8A6B2B2456B02DF2D2A361272E8AFBB9A4E
3878B4F3510273AEE97B397878DBFD5AEB863B870AD2B4513467DD2E9F9C17F4
3184371974C167D7ED20B9F0CFC8DEBC23B328CC0F2E53414798397DD40C4B15
408E98629E0DFDB70890C7940155365B157365676B3FE161B39152EA32BF83C2
2194DAEA27972082873D8CAF4D660AC030C6474CC7E1F24EA6C089A2C74C20FF
358551FAE115E588D0CFEC61DC82A935783F8747AC847A7FCE9C1D0C3A38936D
A2AE31E14A2DF6B5A978531155BBB5ECF1F95E01F32C09784D90429C5E960904
BDD5E8F5EE2DFE1A015404C4DA036DB02045391F66D2933E879F68869DE26B63
87ED424A391FC79C6B0004607EEC2DC03EB362FE9D140532390C54310A2F5A9F
9C62977EE0D33FBD208E67532428E8E20F886593D48C9CE1B37F6B0628E5E7DD
F1813FD6CE34CCCF4CFC655D15072F7A85C3578CA797F69A862FBF571B78BFE1
90EFA333C8E8CCCF93A785DC1659DE19B7F305AA9F35B1DD9BCB9E0F61B37494
008671608AEB456E6AAEC31668346883DA81EA2D4289AF2C98BFFC2D5A2FC2DA
9A0E40BA0E8B8BD7D2E33E5AFEFACDD24CAA727F1FFBB295E5C25241976C6064
046C4DEE17ED51C8E9A151D6E94F2F98244CC222C3404B4BD2F14A3AFF4840AB
3637E82970FC0EC03208D9AAA868B33F15FBC89417BC3A80596BA61BD3D2C1CC
13C3D047A5F8FD2444E7B5B97EDF512615A3B31BE0142BA6FE861F72C90E1FA4
F49638899223897B8E99098EF47482BB8AB7FDB1056394EDF8419F5EC6310EED
F3A78B6B9537EA11DF7697221E315B77E5721C4EE9806CFF91589DA1F82AFB5D
B91D21B83FE3D970C911D14FA8A266971BBEE5020F1917A4F87FF7F3636ACB38
09A392BC55844E3D27BC00E8FC061119FB9E933F4E19765429218BC24706C003
A84C4BD46AE36471AAB605E12A9EAA132BF13D99C92136D424E203D72F772706
ED36F7458D51B1C6214C47E48EA5AE2D60C1FC403D99349FC4F65130EE09D17C
F21D78163F445BC0B5C5A4429D255B628D5D23885F22DBAA477422FD36955D18
08694F707A7A17D38C76F5AD140DDAA69DF7E4908B6758FC606161E1C2AFC9A3
55A918F978D17C5395CFCAD22D285DDEC9B30DD31829828FB1940456B47854CB
EB5667292ACEA970
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC464643F2BBAF4D64A8FACDEA968C5DC48C1
A66144F836F8EC132054639702C6EC051F85B802C2C98D02ACF9EA7E1A741049
7DDAF8584896ED2B3A2F1E9404BA9BE83225B55770CC4E75B3E0863CEC354828
2E33F00649677554FE1F5CE5E6E43EE754496B51F74F08626093D94BEBCA5A91
FDDCAC2042AD0EA58773ED0DE9FC13FC220D1D53AE3CC92C910CAC5922F6AFB1
48FCE2FEA6E7FC9D84A0F5D7D4B35D4E24AC4A11F6D76805E8A049B8BADD510C
82263FEDD03B3E6AE916B067EC516DCD30861254E68DA27DAF5CF84E5E6E11FF
19FDC4AD5B38CE04E4C555757F69C669C5EC403593EB503A2D1437C4008E97C7
6D74AD430973E848FA3C47EBC612072E87FBEF1A4EF1FE73D48B3ED3EE349234
7DCFF0347BA4273054B8062D3DF6FF094944AE4C05363910147BEE09F51521C8
585483595FDBB0F95A5D05CFB53BF7212E2933DD050FB0820AFA1B2ABDD3D5F4
EF8A2692CCA84735346B765194A889582014C2AFF3DDD0AAAB1EA8B6BE61A0CF
FBDE8CC24538D880DC8BBD23B356B7A1488750A4D98DD79667371118F8EA7B75
EDF72CCD4BB1D84D1BE81AE2EE6C98ED6295EFF809D56C850C04A0FAA9BA4A52
A17EC97639C09D4D9B67975E893E12F61E935E00406AC83E492596E10370BAF7
C1B52A067A884BEC6465A5814897382D3BAFE7A94C7C573F0711EF874B2B8431
7DA3CC28FC5C43A46E499F719764BA6BF861040855EE306D3D8527A9BF2F4841
144E5B06E3583F5C997211E5081EBB45283186D67327CD487B978FD50D9BCA25
08355C56B81AE2FAA8D878652A4CAFD1F9EB162702D1F6805B2E15B043C98730
52644138467F77261BED14BB6574EEB70CCD429EF7488E7E5C782C8311B03F19
DC3774FA742BAE933D86EF556883CEC750C615EDCBCCDF3EF66418BBEABDA877
B61551AC2513F418199D8679362167D27812497EF6A45BADB374BD1C3CC6D848
2BABDAFF4C5536562FFF26C1CB5FD8E91869E0A83A5561281CEA6F1F25312B41
B125B4A46DA4550DB20C2618CDCCB2A074C78B92C8573750B91386CECD4A1243
D4CE1767179A1B63E40EAE3829BF4CE47841CC9958B15149E2CBE414A9EAB291
D61FF851067307FAB0ADB343D4E9C574E71C7668BCD2E7CE3FCF7D9686A1CB89
49806B34C259E731AAA4CAEE1301430A39EC155770414B5CF90D1793F98D7EAE
541772A11F0A66805BE577335EC81AFDF3F629F7967B89B09EFC1C0822DCDF0D
9523A6C933683151661BB27664EC44367EFDEDEB631A5CE80772FA7B8131413A
0A0AEC5FAA12C4E485073D3B8D6DDC59C6DA3DB9B063A7C548C58576081E0364
9E488A00C554429F72F81976F8106FC0C276CFE6F6BB01F0C56FCC494F773EA3
CEDD717B7AB5ABCC761FD053FF0F727EE7A62C4A4C0C8D10A93430C7FFD829CC
9695A77009E865486E5EE1319968FC0D479EB9BD81EBED69E888FBA1E2544DE0
BB152A0901F7BCEAB3F9CE0F253FB6800D5D6BB753CFB933FB9303AB6AE40868
36F54284D6DB46BA9856A16B74D2B54D31F745B93F5A05EA389DAA2721AC6E6B
FF0015EA347905B5114C5E507E856A931CCB05A58C30CF4B9105E2B1AB740391
B20163EEB3225514A76AC74C34163D2BFAFCE4C848E41EFDCB5AA1EE1DB0E3AC
051E6654EFCF7C605AD578FC8E30ABD6CFBEF607C948A926FBBFE3F516B4E297
7709EDBD3DB7AE516C55E742F598B61E7DE4E19B4429446C0981B34070CFBF71
A5FD300152842AF43D57F70718498FD85E7A99EAB7423DAA51166F208E041A8B
C089735A59A4A4B48ABF4B835D30DDC7304FFA804319305B7CBFB2AEE28CE031
D2246E0763A53996AFE9580C5338EC127B9D910ED59D59AD0A20F81AC3AEBEB0
996DEEE69DC68C138FB4F7E2FDDED7C5A32595E818473AC05D0A3008F9412539
84075F31E0607B5AAAE6346518C73300B5C8630075EAD569E7BEF81B08CB837F
0F309E34780B50DF93556FA7685C660D26F0C578BC1B886C070642EC17A308E2
9CDBD339C6E671C0EB19A35AF14C508082CB91475FC4232A38D8F3E727EFF953
F4279807ABF95C5C4B75BBCAE12F81989C496CAEFD32121CB83261C81CB22261
CB25FC6164848C82EE4E35B3B476AB4D68C0CC891BE434701DD81BC7416B0A19
2451BB717B69AAB1E95F87B2A82B188C114A1706BC102BF86C95E6AA1014F871
8977AE17DBE11FCF1DF35A6F68433426B70AED5767B4D988041C9E50D57A251E
B1599321EAD62F1E6BD21BDB01FE2BE23829D1F89229FA316758A6440C6B91B5
C93E299629EAE0F44913F7A70D08ECE3D83EAE550534D4B8D453E0ABBD424263
E5925065640605A8440F0CA7085EEEB0D95252F493C2BE73AC38C4720D0E1DA4
66D868E49178F226D4DF99C3602448DFC751345E5AA0E578A355A0186B0FE2A4
A30209C5A902058E1441704B103201E96ECE060DF84CDEEBE47AE04C06E83CB3
C43BF599194A04527EEAB6B067C7CCD05C48CCF952AA1558D312A4D94D80747F
6CC0F88587E45495E8493CCA1B1DA339FB1A3DBA6F331E53F6814C256FAFAE95
EC6775F5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/UniqueID 5020908 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662AA0C3B597123548EA9580E54EF1AF866B3D2246EB50B888ADD050680A
40B0DED04F57B4CE47288EAC8F6969FA29AA6B28CE5FDECA6909DE6337F5ACA0
2E982F9ED1C700AE0D0BB9B61249DDD8BFF65B53B51269DFB0158C60C1489AC2
AC1DCFBED577038DE80F87CE86751494320449007EA922B5924F53BA2402843D
BA09637FBDD85AAFC17A8E9B0CE1A9508F0F8E5884AAF083013AC5189718CA0E
705F28AE75ED2CC22B05B89ABA446304EEAAC280A94CF9C9280C98EABA19973B
B596EEB41C7FAAB530481B448A8CF6D526BDEE9E8866C5568DD10AB87853A39C
3B61627ECB39D5BA7F8E095B9F852E5F33B0545269CC9F0661D553F814511378
EBB3037BB0667F0382E4278EA0678603F85C0F3013AEB1B2AADDB2337DBAC1B2
52B2B115732959E1FF6C9CA993DF3E7C73B00F4A6A6277A32F6D5D10F8D4EB81
47315E5BD5FBE88DA5B2CD9D71A8B51C803FEC7DE7BCFCB04D76C24CBE3E40E4
9FA463B5D955A864FB6C5A78DC38B8B50077EA5974E8A3ACAA54356EB2F96D30
2EF8913C6BB60B5A8EF988AE0EDF80660A26B4A346117DE5CEE30B3060CE054C
EADEFCD37AD00997C5E88265319829F6550A04FA0598477BF73995AA4C37BD8D
5AC97935DE4A73C3F5D62536119B5F7E15A4207DEF9096D27D3D6EF1153AA263
41AA5AC2DCE2E64092DCD8A43E34700E6547C210AA27A3700E11D47169D9703C
24A911062B9F016F858D6608F304E3C1B9FDF97FB541A598466FC13A35978D6A
C89C5D7D115D20015326BBB45A5A145E6200671FF0A54D301FD690A4644B1B71
31A6F795E04FA38D419001AE35BBF8E45CB1D9EC09E266A736E2119973AB763E
3B857A6D32903A4124E226400024EEA61B9F3B463DEE44CBA80C234D6D7E0D6A
70DA92519B5E05F8ED25325368D4BFE10ACE43981CCE9FAE3AA3A8E4F5A17D76
3323249C164B1A53439CC169C935A3DA1E51A3282038BBA7F7FC70987A57EC73
E5A6BDBFA7C1E00D0F1CD764F976BF638DEFC35854D1856ACA558E154F48ED2E
52A98957C411A91C88249B000983AD613B199B59E2FC372CE118C48D3D8F7C44
2A9720FC9C8A5EA03AD87E3F97CFF15CE2E53667FD55687F5C09F66E232F1172
0ABAE2B6D4FDFA83DBB9145DD52BBB79928050C99DA4B870B7E7ED91B58460BB
327EC63564B795F2342E716EC296F5500A26AB2D8DB4A1A5B9CD9C8D39A8D246
74C40FA6F51E831690A545BF7C58740A82594FB5CFA2300C64CFE8EB9453F5D4
B0600344C94728042A0CC1F305F77B2525D268726CF2A2397D5B8EAA8A2CAD0D
928DB31FD5BFB7A436218EC723D1C3B3C9BC507FA5168E2D583A044F28F5AB6B
E96E4DDD3042C9C31EC6E4BA718032C63B4465F25C3BEF53A47ED447DE328B58
72ECCDCE1B493A3471A5D4C0CF6A47EDB5EB3527BE89BFC9D8B61BD9FFC068AE
7589CF6647C381B0CE6F1F4D7FE7FAFC008F2EBAF3CC13A60991122FB1F2EB49
B486D890A517A9284E185157B60CF60ED9970EA9491373F5004030CE528EB994
344180CFBD9F573C76A629DD5BB54BADBE523B9C3E11773BC72C62BE2985DD14
8C7918A138BDF57919EF433C7C3D2DE4D54D67CB958F5B900B855380E2C648F6
63863AD90171ABEE9A3AA79CDEA17684C76AAFE5F93E87F061C33F97262F1EBB
2243D8A784F1E2A1818989FDAE912ACA8655FAB658896B7F7B0E0ADE2B6B60CD
8C2C58D31978FBD7927CB02FCC092B3054164CC1C4F54DA2DB4008F19B69A6E9
06A23DF8D1AE1DD62531C62A002A9DB8713DA8D585C7856B433C1E77B9042FA3
7377663020A0872A61A1D1E3E13DA0C288933A6396A30960B66A4E1404AC5D06
8EADA9FC7A6D9FD63F8E7A6083B28011983B2FBEAEBBD9CF0FA7216B24592EE2
54A5DDD0B37B0A065FDF4D181F5610E17754071C51410BD785E3203B3B8FD5E2
4652F4F8D3384E64A8E74C37195E9B97DFC1483301CA80B1610164302EC164F6
7B6F9BB7D3289DF269672F4E71A6E34D37F362683E32EE697281A432D5C29CDD
1BD7A9A5146BD57872E65D312E417652377049650279001DA4176DC36456A665
7C124769E0509A85C52FA8E60C29C9C9C90CBA02EF963A24ADF5B73D927116E2
D4748987842EC07387E48D131FDB13B36128C47A25F8710242A76C992DDC7460
93224B052337DF2D7C60E87724256BA4993446B7BD4928FD954A5DB4BB6FE477
D552187313DAA39C406143A02102EA30C11DEF732B487A61701A62FC17005DAF
87AFD6FA02058FD1DD38
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFDB718ACD1FE5E0CF9BB6708FD219F4
FFFE3967E0AD6A928DC19581FF2C5ABD4961F9451172CC1CBC690B43DE2F0099
86D8D33311D6C0573F58CD9A0E0B0C1AD3B59BEF6A132EDC8E2F96EB664D1506
32A3CAAC072C75218AC4F176966A3E6CBF678BFECA2D96EF2D2E5A6DE68CAF3F
C198A131023228625D17C0CA52B7166BBE84212139CEBB6F132F0875DFCE9FCF
90586E27924B36FEA1F9734C08FE0B84109D86437D096DC2576E6DC6C00AA4C4
18F45F2D92CFEA647A6508A8ED92D3F8B06202FF8DCD698B56544751347E9AA3
52012E0DC86B0A23689C1E26163F674AA342E00623EA3FE8A685B991F9CFD685
86B37C24BFB42BB7DDD62F679157F082AE2BDE83E736F2993D8C048393BD80B5
AD4676D49949C3EF19932A2029BE9D741D184007401F2704622AA4BA96347B69
E844752017BD93018663FDA7D897D7E9C788459B39B30321C6ECAE276B63B880
D1C010153AFFBAFFDE7DCE1CD6F5E09E418B68C684E24ED485368169D5500520
E2AE932D2CDF44BE37A362D3FC884E32841E6BE12817A12E65BA65C7CE625AEA
E86EB7E2DC73C347153B9B9135A79D2898CBF51F431E629B6246DA4B173E6187
9C48F6B34D06B111119B366A8F2005ECCE7B2ED90343D23E006ECB282E767DBD
57A449D7BA28B98BF4F729BD36137E834E004161FDB2572E1DD4EE78D24DACF4
18B6AC1E4520E25680815C62AA5706D772C8E0F2A3303895C92605AD77A03CED
E934367F083F6561C939669E28B55BC3367D66B9FF92FB0E1942DF5E43BF1940
B618F7BF53D0689EA36BFDE7E9EABDBB3A347A46FD86217A0ADCA9387FCAB269
D059927435A06B7C74B7991E1FF7174579A7CF98B62D725B12E2766FDB7A8418
0ADC2A2006856F96C8893E35D5F6E74D3ADA65B6260F0EDF5212A457E46C5890
9A8F766513B450BC5CA174DD590858C922E3661192D967F077F61D9EA70C7088
0FD707C3953B5F11387D293240D565085F1F209764578B4FA9777801A4D14EA8
2A01E8202E84ACE516EA6DD6D96B90723081C106911C373657127E8C729EA182
471FCAF8990F2AD55F23B8925422E130D852D7875B270B9983B89EFFA023A3DF
FDE181B90C51D705542C45618882C233355671AC35DC5B2B886C4663E7462420
2FA0F4243D324A5983198F2A73CDBD54D8633E01181A08DCC0511627F96C7259
62EB3A03C8EDF836DB36AC8F1ABF62A78E43E123A0777BD6C4C114419DB5C31F
C9AABE7ECAA5701B0D2575AF8A8596254E9184442CC8D0A0AE401F14F4BB6F6F
CBFE0F4541F5A4DD6B0B0340A268B0DDB25BD184FD79C57C9EA994EA6846E568
6C8ACF2C6986A41E751BE0CC1A74E05A30901B65ED720D93D4C526766BCE7975
CA2994A6071152823274A65594EB220EABB3FE286D12BBC3FE25B4EDCC862212
56F43791168CC31A0E78093AE7558AE165082660F4ADE4A53755314554D51D1E
D0A18F5B8B7CDF7103F82C915F71A60953E618FF54612470ED2F6229EBB4FD0C
DA78C655E71003C12938AE46BEE7C595B123A580A6D198644049DED12F4BC686
628678C9FEEE3FAF4B4ABC91988432BF3E266C7E76C81AC6A66611427E0CF66D
0C4D588B8B2DF2FE325EAED87DC8C6325F0460690BE677AA6DB7E0250B519329
15B1C4C682AF762302005B0400CB5F7CB4982A80FEE48E354CF9989F9C09C970
00C4AB872867CC5732EEDADE395CA6351ECB3F85705543ECBAE41D0DB61D0C4D
24FEAC493031AB94CA42AFC7E0EEFDEF52E5865DC28AB7886911E36E121CBCA1
8728D3BD1E79EAA446C6FA10193C5AFC3A225D34C3D96440FF8BC41DBB6AD909
8C13E0F4346A60122C19DACCCBA7A6B8A28C4E79826E6F525C98F52DBAB9DC15
D454017F7250A276C0D7093635AECA7AD591C46481139D2EA3F525FD62D8D770
397C3A8B6696F8CAB2F7437205F2AA8B29BA9DAB6881D95EC08325BB6A68D737
36EE2874EBD426E37B2FB6A3417520FB95FEB69D59AA5BBFE3F1CBBEB778ECD7
6AE495A872463510543EFFE5DD50FFC2FCDAB710AC603AC00CA2400D04A17C52
33C2CBC92DD03C1A8C69357F05A6BFEAAEAC4737AB470623102FD5476521B1B4
E625D733D197D58FD49F96DBF2936E063A86D888CE65C6EFADB667852739E026
47D111A69CAEAD0DF604318C965AD2F0E56F9482B8AF9A3FFE6A603B169ADAED
B801F01459540E1BBAE50115918754777591A69D3332B13D2D991742FAB22D66
F51581C9885CACF917C3B46A51D65D864AA64BDBC8F3B0A829070C169BFB55AF
92C9155D913DD39924E8FEB9ECF4787CF3CF58F028AE8CFB0AA1C09FEB3887B9
5F94F847D06947FAB759A9FDC058F0A71FEAD3804BBC45A13D858400608D55E2
9CF3139B5F7E0B1171B3616871F616C0DA055344A850963F277EA27FB080DFA8
88B5F40E8602931393831F1DAFC7F5F8269C6E74846306E52E323E9A5D8B2DBF
D4E2B4D08D4386794218D9573497D3911A5BA57DD91369F6396A0D9703E14FC7
264FACA7547B40FB446688F3032E6C4C3ABE36AD37CB2245EBD80D0137149914
3B1A2B7C39DEF01CEFBDC58E4605A796EA4FAD792906B5369E92734F74108472
B1A177BB6B07A239822F269FD066274F2AA87D7ED4A35ACCB93D4C6BCD6E1D42
8B9D34331BFA9C9A08BD09FD5054C8388DA82EAC5D74E63E149EA56A941E4DEB
F136186B257078A00BF2C717050A9B73E2CE44EFFFC2DBE5AE8A5C99417E59F5
07F74E231EFCBDD4AFB595E8C3F0E8CAE4694DF01D2B6FFBD4E372B3B85E00C1
0EB6B5399326CD58D04479627D1A70288C3CBA2FFCDF1A4368603D6CBEB4FA83
71D3C4FEA5ABAD50E992F9C8B30F95BDE3D936D99B130E3BF1663339F4CE8710
E4F3D621652A45552034256EEFE521828F2729A2542C2F3E67AB887F108919E7
2D93AFD1C8E263DA30FA662BD94ED2E574319B490AE388E54310010C92022EC1
63B142CD058EA61F649BCFD98E28A470E2A14045E167DE52FF1080CD492C401F
556899F819A7FDD0E2BDF8F7AE18923D4E4EF952A5CFAE00875038976CE0B320
8E7F3A8C0F613963CF1820604068B2843C48196E77C20B9CA73A48B4DD1D946A
AA58D46BECFF56F3CB3FE21FACB556C77B569846CF75CF5E729128573D9E9E15
EE24D9A81922BDDB20EA48EBF72376C91098585CD939117B3F5CE07E8A7D6896
547673A6C42EC05F24C0C452DD5B6EC9CD8660719F48B11C9CCA8C1F9A6CF106
BA7118028B2A2C9A9FB15D5F10F9B8A4985B75D0BC5211A3BB16CC855A9FE128
6F3173B1245C632F6EF7949051E32E51F0406D3E109C7C329655EC7372218E80
139E62E7910590C962AD56BB2B348C551767F4AA82DF1FBF64BEFE5CFD011693
306E17DF2D9686FDF1F0122A886D3AD63FF57AACAE40009D0682CAF5DB88E408
B799859A65C1415935C249598578CC1C437E81D737DF5B9B1CCD769091F8851F
E36EAC2473414A2D91C42BF621F46178C93FF2BAD0740A8A4986EEFBCD407D7F
E3FA254567753C60B819EED0051D631CC75E597DBAD011C4490446EA24280D91
5E39263AA9F03BD2AD2058666640B4EE6ADD5FD8FA44B8FEBA0830968AF6D402
754F0A59F73AFE354E38E66AB7408468BD12883D125828AA4F7AC257FFAE61E2
D581D7C657ED5144482063FA946B9A281FD2FC49EB532D6829103D9D9EF9C44C
21C5E5C1FE2F5DE5B4FEE1E7472F004E9573E5E549764AD46492722874CDF880
2C08AD532B1C107F52B7D55F1E4D7F28A12064034A7290750EBC897F11987CE1
2AC81F66B09DF5739B4A104248B717850832B3812C040A5C951CF17C8608D035
B921C6CA50C4ED50CF8D75C0B1E22C79E8CF744F0A8735C3247550398E2A60F5
1647808E8EB0ABE955DFF5D18D82DDC9333A06B22CBEAF9086B2FF0BBA147BFF
00785663883D258292F8578A3796AFADEC8E98D78E01B81DE3A78F6FF1BF9570
7E15A38306DCC288F0FE1CA715C4552C5FAF0BA06C110F111447DCADD578A1F9
5BF4F5125873A36CC6D3429CB2E28644D3FF3EBC6CC1BF3B603527DDD8F6C69A
D737708CF072B887B63AC736D73305BE155BC48902F3756CF2D2AE9B206DB702
65627BF09BD0A0FFE1779A4B21D2F14DF6180F5E99C1E3AD714F4B20D3A3B168
12405B717EACBFD6D97B6A517050C40FEBE848EB1D3552CDB7445AAB773145ED
4B472459E988B7DD0A2A76DD6BDACBDA1687549E2A73EE0DC904AF7151AF70E5
CFB610DEC88E7B6F9E6717A6A3E963595AEE2152145DF4603FA27C0021B9D29C
89BD121E69EDDEC575B281609AB41FF8BC3F5BEEB210E4A52724E729C277E902
195DB9D8D0A492B5A63D96B1F47E96DE90ADF0012C12048A7745A3A91CC8B34D
FD7B2F63E01AEA9875D483B9850D870D004DCFF1B72D0ACE2E816AB435AF2A7B
126C19660968130E503AE7505C3FA1DA30CA1FFB751B46C7972BDA632EC80B94
172A939DCB76FAE05F65E90F25F5BDDE6AE263B2BAB08325A9BBB1FD83F4E6FB
7C7698697101CDBFA8D6EB2D520AF312D581919F519EC7B7BEDD4C39378B13E2
C96165F1DDAAFE730CC9239E7035703CDF271AB8545869E46DE0AC95487711CC
05ECEC91C8B6419F357172781DDF5FE07B3028CDF0C41F884F5FE6E2DBEBE320
8944DFD5E03E76EFCC5CCDF9898BF2142CAEC9A033917678A001765C0A1B6616
E0B3B0378EF2B8386C52B3005CD28D47ED6F90BF0937F56DED0687DC232178A0
7DC10C1054D2193B8BC36A6C26FB97DE6E1E78EB89C0658EFFF9B5FBCDB3F536
F6EBDC6F5B411284F2100092B700A01AE2617C9A81151D88FB40104F3577C9A4
9FCAAA6F00A72A232A3A1E688B855168811962873429AC429977FA413B007B4E
AA15A08509E95AF774AB56E587C7D342744AA98B3CD49D97CC02CD2DECE3C479
D07BF2002A7E8F9CB531E4557FB3FDA48AE6FF6C8CB81CF7CE14F3E9E027B07D
CFEE1ED4A9C4261E172C8A0A692F1CE506264DEE6AEC53F2579337B95BAC509D
8865BB42CFEEC2BC6D29F8FDDE303E4A271AD388529B3014758FA222D02623CA
24E1238F96B0A0CE6E586C0F0067967A1A308304470C9B2018FBBE9BDFD1AA7B
5B7386118D12CCA8D5508C491DAFB1F9A96365BAA62E2704EB708FD97E607081
AE0F2377F38A87B84D2159DE2F140C7D5ED6AFAD06E166393609EF1DC1009C1E
9D2844DC1655320D6409779E3A42403FD4606197C4AE92A62426E882D4FF6143
BBC7DEFC57065780A9A29168668D7C8A3AB33D8949B97B1812E044FCA1D709DD
DB0964A51388E30C6845FC62276FA81886F0DEC6295B8EB233820E3E3F0D6FF8
5BEB33C17EBFDE44529A66B90E8A064BFFC70ED41D3BD79AA1D71C93D444C3D2
82B99D8AB7B024433701D67A6836096BBC56D40DC09AB5B15BF1713C6F558CC2
0638569369E51EE6C5728ED7D221DE8F3363A4366C11E5EF81317B04FB4BD97A
3C2C002A240F182DF18E72EA758222FBAE4CD7CF5DAC5A6B07F6343DCA5AE984
D4EA4FA610779DE56FAF0E6E738B7FAC8B9B0E66A1200D2FAA612EA316EB8E8A
825F0CE7F33BE13D8D145F8A8E0286A5591B6EF1661A4DA77BF2D05DC09435B1
C97B2DA6B86D7838567A6F6616A2EB8C27A528E8809D05D7750111E145D59B14
69C1F29846A212FC7503E2D19A0CD0290685F9D3C5105C4887B9AE8B6B492EE3
07F7E457CABFF5B5E79B5BA4E9B8DB60B9A04A3E4DBC672004CE2C9768561BF1
209B583F7259B861D1809812AA1E55B9ECFB39F9C43FEC903F9997D35387DBE2
CAFCB0D199730B301485CFB8CA653E38C62039D1BE0588B7E0D3C0C975D745ED
F39BD1323615EC7B10523921E5091AE4760A8568939D2FCDDA6DCCDFFBFAB566
9B4E4BD0B8F9C6B3C6089595200444F0B12593A77AC3B48D420B5A340A26A148
4F17687D2F3900F248BEDBD71CD9C93BE82D8E6C7F0689E1EC001DD6E01AAC9E
D69D1030F7543E9FC50316F46E3050FDE01D956097976F1E2A2845661DB6DB4D
4C72A509B64BFFC9FA1B2A295A1F9D9CF48A6C8B74987A0182DE74A6310F713F
0B956F314CCED13246DDAAC0A6959B70982B8151E03C1EAC092C3287AC14833B
7F55A04746A4AE2AE6073B45EBB5F6E611516BCA4AA8268B96189B963D947F3E
93E768E65DED5D9C1A4ADA73978E9616FE79A371DF14DBEC19C378A52AEF3A23
75CFBD77CBE0A95793615D1C25EFBFB2A3825821E0593439FB70E63911D63E44
622BF883851A9E6BCA44BCE39EBBB4D44AFF5FF4496F4710711CCE5AB8B3D728
F05F3511879AB6DE92E4221192E4238E710DBA3D69456FD365BAE24F737E9FA5
DBC1CBFBCFBB273FEF253D6B8D5755258959D936247F0F9E3A05E6F836BBFF28
B633E38AAE46D5DD4E06095D2F1821DE664153B48D8B17E7C23B733F0164D4D5
B391A5D2DF077AF7045015C2714F314AC16BB1740CEB9B5FB63EC03205C916AD
AE98F69D6381E007934B62259BDF4B117AED9C2D4803D94D2D5F564B1AB69BE8
DE50F84B20B464C5E7E86AE01157A41264701E58685A8271288013795690850F
CE890EA45B2370C2841B2EFDF7DF07927530295CBC636C2795B81439E4D55F79
16A6E8795A982063A938D19561D756A88D5400C8D85703F586BEFDC32052CDA1
7C8C588CB588AA244B3925AC7852FBFDBEB1AD2678A4D92F4ADBDE60F8EC7B3C
355C2646222D0B5679D1AAC39B97AB1FF710241A9C8CF41DC6D30C3B87448491
6534E549C9C9BF9C80F6ED33A0C777A8F5376ECD44E470382132172F06F1754C
4F4887C7D5BE9FEA2CD30A5476B0F9CF07D37C22927862CD280C638DF7E3599F
62B0585D3C30D8D46A91D170CA3123DDE4146E5EEF76A3EB471EB16E8E5CCBBB
04D77DC4955E77346ADEEE707DD733E51C04C1138901391308AD3F1113CBCD6A
4B33575A0CE6AC3E5FC7B39ED3AB223CD8564303C71BEBFEC657D82183B53A6C
B02CCCF32F75CE7E157F9073D9BB23735CCD0822851BCBD508DBA3B92228CFAC
76F7A0B624398DCD294138659ECBA8F3B264A7B0DBD81BB6874C0F4DD9004089
3E592DE81951F1A1E2399A15A38689A4E3647DA0830DA786493AABCDE4C45A8D
CDDA2EB9E4AEA46BA8FB855882DF073F003799C974695BA1469DCAEF51E5662C
A1F1207F04C29152706EF8BBD5D37AFE50799208D7156DD88CC27C8073A5CD42
6AA201FA3C6582EFE85B731BAA03AEBD00DEDE4BA2E23539CBAE0E7B564FB9D1
1FBBD82D1B22C0DBAA929919D808E64C362A257EDDE9B4255C64F9A2B4952CFA
BCB5122C1F022C88572F38CBB389612CFB082E92CCFB24EA9578696F57047C80
51282D31771F431E2864E9C844861DE55351B9003F6F466C4B9455F258B18CB5
48FA0795606B3EEA9DFA19EF7CF3EC9D025A85DC59DE1633614D29BD1E678EB6
A58A2457969B1FA9C3288DAB854218B76005BC11B322FE161C45AB766F06EE1D
A08686ED3EE39A48B2DAE2D79229B68C24395EE231FAD578A1A8D3ABEF1C3F91
8BD8D011E591E92E88BF0EF9B936FB6B4C97DBE7D4C38BDE2F51B740E2A86055
4861E38250CFFB4E739DE8C200F179E0D6B90113221E0142BCCF380600414FB3
B136FE6D18121AE1D6E35CE69F2FB9FFD46BF34C299C845F18569D27EA8E50EF
CA343360596C03EDE85353BCA7EF8CE615C004DC9C454E47E8A0896C9AEB38B9
4B9AE87227227B7A552AA582DD0685CD570B3DAC6925D75EA243E65B305DC9BF
6173D976ACD4B6AE1A359F2FB0A5E4BFBDE8DBEC149ED248DE3E22E4F262A56E
B46CFD4DE3B58E0D15BF2D5604C1B469D9E8B40DF9027CDB4BAA4882BC8DE52A
AD8041372C67F9BA1F34E42B976BF76149CE12512BE073C783775875126F2969
1F50D023409C60E18A0CD50C7E63089C321522F2B655FE0E7B1BE554568A262B
0271ABA67EEF268AA1B135AC15B4768E5573C6C616EC08777C71FA712E6BFF77
BE34154E544351D7AA5F32A514E93842BC8B38240D53A10CDE76F2F3E7A5578C
3B9401CCB616D773F394EAE4CCD4A8B76D86937BDCF61010C35013F61444DB23
CABA8F1B289FD089076C1ABF9C8619349A5E6C7FE2BB23E79D6509816CE0B320
8E7F3A8A947D7B34D0F1CF6AA03DADF006837A2C5E235B9EEB4CD83C151C8AA1
38B59EECB77CB5BE8C9A7418389C6BDE8D36A48259DC08D6ECE0EF01BCD9EEC8
71AFD57FD3DC8BB67DC517F403076BC8897E6A8D5B3683C9BF396E85DAAD6D6C
F68A632DA2E3BC27F9C70768EFE00ED70A70D667E0ED50F4BA152D4448D4AD4B
1B25947821DEE4ED90AF97200A904D1F58D1E717D614739C77DE14EE3A9BE93C
4577F5D68B598A5E5587A2383121482B77276D5C672CB75CA5A7D0CD52DE3C7A
6BB5D5274499BC1307E82F93EEB1CD7848CB68A5110390986F9B57FF997573D4
D9D2FBF3A7682FE9B0B0599D9174629C8267B1EF48DCE63F3F48695A02DBD8D7
02338EC5200600145F4A03ED61EB20D1D6F1201E58DF7B8F24410F04C89AAD7E
C6D89B96FAF89F34E491186E79F3FAF068FB2DDA737C385D668E8FF9681E653A
77F7EFE4854342F2F17C0EF4DABD26C07930ABECE5E9280E949AF606E00D469B
8CD542E0DDFA2E00665E1724764D48EFB883578DB5350D14432E48BF02B415B3
CA8D49E0DB38B05402A126C378F6E7B8F6994A8C934797DDBF7F1B98DF0B010C
7FDD717A5FD3506338DC5F1A3E5EE644FB5955B9AF143D45C196E8941194339E
DF140514463E4AF6F8203B584572BFE5E7A4BBEC7BE98D2E43BD6B5BC695401E
0AE4D56F9A2CECCAA128AA29E064DBA9F0458FE35CA01891DE0DCDDF2638DA0E
D0D8277B11607975CC29FBB8D7229DA29624B70E814B276E96BC1C1E95DEC7CD
47FC235E96D3BB3D354DEFF8E32A68FED95C933B074191CC754AB5FAAC0FFADA
1472DA474D5EAA684B8EADC5D12DA28C937A52B3D1546E5D02E4EC76FE338370
0A594ADE0E9D59FF37C4F4E6E72E8007CE85E9483ED66E5BB41ABF15D7DFF9AE
FEF7BC94E7C377BD150F134E5BB4F8D8247CF10521AE6964C58706EC67483124
923A2145E64953D1431E63A25EAD31CC61547347BB2E16A5F093E63A6A3EF948
9DFB011040BAA16A38279A4429B293905951355C4D4A4F65BF1A729076C63E03
5056CDBBB9F4DB89659D42B100853BCBD4D0A9C4955C7691B72AD442BDDAD18F
30DB190E4D004300C33D979FB64C1924B9A869DFD9A72C83D2DE423A5E2ED1D5
F2FAEE3A06766DB1C7582845F67F0C6B6AC826E93AA5357EE2E010146CB5ED8A
6BEED0226D540527F17881DD331AF2B686697EE71FD757C2B99E52AD0DAFC43E
13C084DBF1739EBD93CE535FEBFB56088DCF35A3824B6212E9E709FDAC53748F
F1ADF4B759DA5C1E80A434F30A29E7CA0AD5EDA5CDEEC7A61FA1BFDC20BB0292
D5DD368989AA27297EE080249882868EC4B0B2A85823E7169D887CEBCC41CC09
ED7713E0C035127580DCEEAA7395DAE508C15C00B4800AABDCDE513E0D6D14A3
98702096A051DDFC5A3187FCD8EE017F5789CB8AA5D5C0346765A6448D9621E4
1EA5FA846C05A2F9149D7409E28670AC8A3E050A262BA8BE744B66F291471169
FF7BEBC01FA7F87E6028A8D5C4DE8B7ECEE72D665CE4C7017A63899555D5D617
BF4964CA94CD5BA274FD97E3C780E51686DB128CE7157E5E35F756077541F8D4
A55CCE87A3C469F9DC2A9631C26A25F1931EE0A7A00057340FFC2D64E52D3DD1
E0F026FC3AD24DF29EB285C7AAB8029B8895625136EF5B99A59C9EEE4C09F24D
D0FAF3EE7FB76A23B927227E51E86F667463315218791DA09A09C758E6B95C18
BA7F14B72CEEA17CF4A9394C3E796FDCF75151398B14A652E43CD3378D5FB757
FBD2AC083F73C972638EC88A57C2DA155B4C171DBF26D15411CD48CC9C7FCA0D
87D61AD0A81CD4BD14F7FA4E64D47B8012CEE0906279A7F050A5C5F8E8DDD718
0FC0C506206DCC59674151DAB94282F26BD339E24307828CEAC7030CCC9F19F2
009AA02B6836AC76C05822E8CA23E6A1F10FEF85AFEAC06341481153D908EDE9
6266CC95F898E8C085E66333657CA0EDF26A4DCD740EEF4F999281829A20CB5E
8460B4C30E3045B175021256F3966F8C6973E4254B3E605D8FC49C8F97D25635
B98E9B51FE570826C75E642967145BDFDC42654223C32BBDFDDBA1C764174646
AD7CF2249344246884AAD6751AA3C570FE0E4F0239E05BF6E98C99C22E178F33
BA78DF24F7346872E84795059D0A12F0E03AEFEA3D477C0433ADAD9AA04C4B6A
9E56344507DFC061547601F30C7FF2B337B41232EC7CC4F97EA37953501A33B7
ACA789EAE744D803921A773BE8A081FB687F9C55E3A3E8C6131B4F0D752C4C6A
9FC68AEBF25F1D02381B292EB397348C0743D0F234829B8A9C0B39ED96503D4C
6D907DA1869966AB23C9930A5861847008DB9307689E96D4DEE182CAABFBECC9
B908CC9442636D325E79F6F163F040CB1A2E88CBF064796261654AADFFC21A73
73A5D80CEAD4A5479C77743044EC0600CAE66913D3A8966A47E9FB1367E89709
CA7AAAB9AE3B273DB6E751F50E1D9D88A093555A7D35BD9676F71B57619324C5
DCA1C60C72FAF7342B858D2D40789EB126F06D5B7EB99091BFD95885BD770E15
BE2901A68593BD2AC72357ACB54C3E68A5489DED2576822FB9B1D997AEF5E215
EB4853B5FE98D4B56AC7D0A18A9939B1590B3565E8D4445637ABE33555C4BE21
FD88A9327C3609D8888F174524917B756665EDAADED282DBB600935FD62F962F
F4C8BEFB1D6362719D16127D6DCB2A974E04CDD3654C4B2BE81EBD9F643D0861
5506D430F35F049D3C5F1F84251854E2CA52018E6F6CFD220CD70AF44BB30B91
4956232718F9B0F5153CF0E5BA64D0B1F97D357057B13F241D0C780BAA5B3C84
D8953920400ADC7DB8C027E6D2B7C414EBEBA3D0A82B200702ACF196C2212C69
7D91FA63D616CB081EEDA3F76B19E30C48EF6BFA4F9D56D1706B0C02A96DB5B4
160F4CF82685E2EA50AFF12B90CD44A8F56DB80439A69E65117BE96D9362DAB3
5A08034E84986E67FE362D21FB745796922FC131F2CA0135BF243CB028AEAC86
4D8FF86FA41F7B4CAE3B0F569D989B86F32999ECF6CFC9BD2DC9CBDBEC484128
E2BE462BA087C820C84FE455B7B599AFD9C59CF0A7F64CBFD59A346F71944422
E51FF9DA75054209045783F774946F66064E06F15A36C3A9FB8BACEADD9DF576
B9EC07DBD93D553C6DB7006C7792CD9CBA42DF5EBCFCF8B44BDCBC4B52A67C83
4D2823E3CB3205BD5663B87D0A830021EC9BB70B69652D43855E8E434521C755
D34B49658DCF98E78AF19881F90A3232B30C533F5AA49475A08CB730DB9A6A39
DB65E5F51601D3F99AABB97B673A043F050CBAA5AF49D2E5719B530149E77C47
5439CB3C7BE0009B028213517179CC5ED6906211B31A4D86AD26815F906C87E5
75E6F22F2DAC25BC0B3B324BA22C2249B7229D3D4935A63B81D3DD4C13857C15
F5402A1D3AFB0B281A3D4F2ABC5CACA1FCCDC14FA3A9D532D953BBDF065BA859
3A5C92D3E886D863041DF985A64CA196DC812372E8C43D4A91208ACA80286C63
9DB84F586C0764BDF79C35B7054D6ACB280A1DF1A029C74E3C5D21BE08BB792A
44334C8177A870050477C1EF6FEBAC78C97EA12D9BB484700D72CE5B234DA6BC
7DA1AE910B6C7C8720524212EB03C70FC2CD360993B0A8092E176ACF5CB4AE54
F7A900F03385A071514D1C50C036C99C74137765DBE69317A37AAA87A31231F8
FDF33308288367A5B2EC54D872358E0FA242DB8047A2F6701FFB32FB2BD9E80F
AC50FFA8D55E70BD83EE4AE35EB0326E6CFEEA1650D919C7FBE17F4D897F7240
1676E38B3C4020526DF96316F175B971EFF383DC58FC1CB55B5E57139549F91D
B98B4325F81D635EAA239348A8E8446A880E4E1263EACB845BE600ED18BD332C
C2B0660AF93752D0CF03A32634A0FE15520A57A2094F09CE69AC3CA1772D4B83
040CA925D6868E37A44793CE0071ACF0F8A977A1C5C1097E821E93B87DA8676D
CF212AE3EE4F187131BCAD4E78F878145B1FF6ACC4DEDE6FB30F39199CFDE281
171F154A8F1D342FF6ACD9AA3D147257AAC0F0AF6F3A84D22ADCD5B73C396EEB
829967F7AD39929620B5A32E5ACF0BCD505C79E052E4C0BE85B88E47193A242E
A4B8119A3159348ED5188E1675E9B27CC5D7855467C1676EF037C1DB7487DC8A
611FEB52609A421A8F54FFAA5BED629F616C1D9BAC5A1A9F0119AB3ED796B818
9A3FB2B7C1E915D1E136A1C5A59EBE373490F896663816B2ECF01FCCC7F53997
622EA19A5A165877A57860A71F14CEFDC9A7547E79A9CC4869CFC14FB076E7BC
758F378A2E06CC917A406D47E0743EB13E6FA1BE5D98D1595388E0036534AE17
92DE14FE4F52F89368EB556B431C31C840E7EF500F1D26FAF8339F1FC12D5D5B
0B299D4AB046AC1748A718AD76631A8866B3FF32F6C800B353192526CD9A6E58
66CEAF671CDD3D65F328EAC6C224230B84531D5B7072A7CB532D4716417E2A63
355690006FD2BEC4400892D6045CF2BA7F649AF87AA556EF386EF4DA829D6197
9D070D1A1FA44980F92D1CF3D2EE16561D89BEDD49CE23518B36BA1BC88AF763
B496F69FCC6C1160A3A77D3E2C0F02E0D4B4B308B4F46CCE1B7E5456D9C6EF56
BDFB4194A18F4BBB470442E97EDEED0FC2852B4C8E8F88E556F6FBF94BE64454
DF32D4115FECE9E1FBA6E58020FD4924A298FFC20C90F4D1D6FFD11ADED0F04F
C59433A0016C6C6D6670FF4719AB0DB6ABB95F57397A31C9DFB70CBBD73D3B28
0863539FF8506F716C700D9BDE299D65B6BF953F3D81E5E83919268C1D76DEBE
DD8EA7EEAB388A7A86872E721C81B4DA86FF7DBCEE48C37423861357248E227E
E85517AC4088A1C8BA8F7059480210DF75DCE776CB76B6A4CAB6900395DEFE5E
D4D2BA25631C525D4C605901CF73FB7DF774021B511AAA8656DD16B1E664B2D8
DC640B8F249400B0B6684F94F5FD95432127ECAE68EE8FAEBA264C66146CE70D
A110ADA3FF7F7988B4E83F949A331684B7D79CA55BDBA0ECC29184CE9620C2C4
D8D6C5DDF037E89DE883906B6EC1B67D5A7D22D7DA0710400542B004F7F4E8A0
15CDE853C54DF29FB1D4452F95159588B16137504A15FCB6C5E5DAD8A7370DF2
151986BAF12883912443BFBCB66FDE3594432F2E465EE5377DE6D4093D99E2CC
32D0CE3EC278B543AE1DE09232397C29B0C3A9572B41846DDAB3D637D94B832D
C0D2D030B8A61B6B72D010EFBC10A2F01630EADD4D85BA040427A71E83A6E3D1
D818658180DB54D205907796793C63D467DAC840AAF98A4061F0916BDD424F82
B52B34D51261391CCBA5F9DF59759BB949E0AF78CA30CA104B8D5FDF29913F71
CE7DA4959671E83C381FF87D1959E99A7B45109C60BEAC450BAAC1A9F7E87DD6
09A4A6F5264081976E1BD9D09C8F889912CDF1F28A9779FD1713E45E7C34BBCC
DC5564F35E7A7E58A629CA7489ED4E07B5CA8208854F33920A96CF1235AF605E
9109B69CDAAD4BDB6DAFF3A5A7B00722CB3877564F0C6E34112382C459A9A853
9521CBAA205E1E1718DBC9182697884C9641DAF026D958C986827DF7074309DE
A75462A7669617906E30D0C0435982F4ED80418CFE37CAA255292E55321A2634
3FD6639BE2472A55F0B63DD2204DEEE9AD8EEA8C998207965CF783EFCDFC2E7A
483C3ABCDC45CAA03B2AFCD9FF9C4F8A6F517C8811BDC0A95D1A0D196AC5B630
DDB5F397C508A3FC0C9B783A43A9CF6236DDCB64B3BC18A86723F8B65D184844
A492DCD687F7F10D0D35DCAC2E9C3CEFCCA89BA9BA8CCC383E5403F0A789DD83
486D452A2A16DA69FD3B807DB76399B49348DAC9946D021BC9F43F8904CF8328
7809601152E7040CF09E0494DA3972E8E74A83B2089F1ECBF1B6FC2110485A89
AE999EBE0C6772A78791CF652AB30EF30D3B1601D562A0B28AF1A3CFFF718849
3D9472D456BFFF7C8FEB477B73629D5824DB41E1EDA67344FC201A3C9494D4E3
382799F62A9A8FF893EC66AD77BB8E74D610B1883508DF711BB7C3E6666F2EE0
1B493BCFAD6209703BFAF7393C75A802C03024777F9B9F6189C05DE0FEF70EA8
7A089DD77EE1BED9C9D8CEF505468F81AD50871784F70923B0D35E16D78D6865
E5F5B28C28A42BA487DA9238D7513A1705C8DD7D8F65049EC0D63B29CAE21ED1
411BEC065CD4A60ED52E2C3D999BAF0771731EAF828B2D0892569CB35C1766DA
D089C8AECD5F7D257032DF3D07F7A55B1321256EA151B58F6B51AE27EAEB9D61
F2F79935A1C26EB75B9D05BB0772BF571738AB7FF52CA901A5FC0B5FFBAFFD48
B14938B7400370AE2386A09D2516C15073DDB30D851616A788499A0BDA1FA756
C9EE25FFE152C6E9319264660D07C7B17CE416D1527B5003F22BE1EE1A386B28
CFAC9562B17108842CAFC3168B0C9709CD5307621C438DE8F76D599289A13228
20789D2ABBF0855285A971C86362C518CF1B2AA5779BF50982B6B7E3958073A0
4AF21988E8C2499C57CCC01D4C95F763268269622B03AAD535AE26A7C2E910E7
13980B9844E232C0567664B2886C570B5166BDFBFF7363EF0A7C8A41777896BD
F4E5A409AC57CFE7E8B387C458AB107DEFD55D5741BA3E063012FDCDAFDF13E9
01B1A02075E9237E39ECFA0A92880368AA035A137FA86BCC3B708444415CA1B0
74BD93E1202065E0CDDC637EB9C2361BF340069386832F264059B5E91B0AC60C
033F1EB2B2F64F05D26AF6CBF1097BF5E3117A061EE58F40537559B019BC4D00
E5A100BF67934A53C61BED0D27AEB17CD89E9D2D6EDF1818843A84BEF4457C0F
62308B41041D67CD3CF5EF4349B33DC5B3F5052D06049676A8A00F6B7AF18CB5
0FEC5205B95FEEC5BA9299D1F59DD6828FA924F2E62A1BB7A7F5D1095DB37330
4C12BA358BBC686E63A19F4E5B3C240D70B60A50232FE55675B6EFEA2DB92B3C
EE7BCD03A7A524E5FC43071CEF028F9EC46261CED81C0AF546A104E7AF96FD3F
33A4BA1FEA134C07EF575769DC0B14A365634A516B28E8CB40C770372BDD73B0
B19BD1BCF5E0CF29431B7BF6E7BB1857AF75BBB9868240D0A526E932B8A6E4B7
605440E36C25435EDFA33BA5EF037A201806E4FEF6A68DCAFB3E15EDE0ECC6D8
DDA3CC5398BFE0A92A7CC3FFB40B4B1FADC38AC95F5F404DE2555D65857EC1CB
E59F0482F1130D6095FD5ADDBEA74F09542B52D3ACAFDB7EDE6DC3C4593DFCBB
0899D1C0DDB25097CEF8A1C444C5929557D4031677B6ABDA4C00DD1ED68E37A9
E9143C6E57FCB82B944EA6EA67C3062B32BBA4F42451D975CDF7173226D866B7
915D967DD668C577B1CA8DC6FFACC07866DC25E916626DB60BB22FE878A44C73
257BF52CC663DE43D4425A5E64EAC7FEE09C6B19C07C26710DA9253C034FAE63
BA69DA474AF62FCBCC1A2B2A7661741D37636DD2031711802D38EFAD70CEA7FC
BDBF1C96C3A79A8C920D5A43212A8AB4833B32D438567AEA0DE86CBC94CE69AA
37C623CF0A8667AA1DFCDA0B14660CDC57668EED14B6544E25D1419DCF61EEC1
2F80845D6115F5F249A0E1C190A8EAA7A761B1503116E0A05489D5C80EB9A712
DCA8949609B4714FCC76FF8B261428358F972B49B56FAC5F72F96E3977EB1675
51902E59BDF81A5F8D89BD622EA05ED653DDE719F2FF720CF5C646B82C907E18
BA6D6BAB1206C4E808CEB69D3664399923B35FEF3CF555B93B8361E0FBF1DF41
86F418ACE305D1B265E42514045A364BBB8F9691B030C357C006BF0C2CF26CA7
7A6572497A6859BB8BBACE1054B3A3C98AE9147255C488AFEF868DBF2A501112
67FEA073DF33D0A972A7E90D7AE0BF6B40607F0E79776B786CA0421ED9E9D07E
EABCFE2E28E1410E7817F6F380201138B142975DD3B9703237DD759FD03E98AD
C35471A40029C27F556400A72C8C6BBDB15B1F65B4F305F8BC77E11A5464B2B1
00FC0EF076CB7DB9060FAFF8CE45014FFA81B89CA8C81756DB2F400EE762F82F
6FB287CBBE7459530A72D85AFA92EF3261954AB9799A364A3485648B7783F11E
16E522BF392AD0F3F8BBBC24D3C90009A4366F348987063998BD80194DD0858F
C9D3D3973F6481C309290B63CC82054B322CF5596FA5607CD44D63BCE2ECE89C
CA28AFCDEFAAF90643DAE2688F464727BE1C233AD0CDF6BEF05F14F8B9521DB7
82CC618D4C05E5EF89D4A2A0F80E8ACCD8452F07133F151BA365FCF518F67729
6EB4A12E6ECE07CCE8F4A06E6A0E5CE5DFBE064B2F4692DC1256686BDCE97B10
1109CA63BA384C3F2C3C13371183AE20DEF6D8D21CE48AFD1D5CFA65DF3DB858
BC0BB136F670D1FEF05A7D536FB58D4304C5DABDB3448EE3D1ACE5B5565925F5
C088CDA1F35F8534986F0938959BC6D52E46DC488C1790C5507FB65C1D5F0A9B
456A620D86EB9DD4BA772DC0B7EA472AA4D602897D843318C9F2B95C4D9E184D
04B739BD3E5415B5A275843EEC7B5DA65F394678FD3A50C3CF6DA1A0110D3922
29FB9B52D0FE8A9422B11D16BA47AD91772946CF3A6DE2333D02D702E29A1FEE
818226120CEA19B6F572A10605DE64FC2B358C9ADD754BCB18877DBDF45C9B46
4B9DA1D55FF70AD348A891E6FBEA54227F2D00C7D7CAC5B56FF9530082635FFA
204E29A83C23AFAAE519BBF7E9F59BEC571C0DBF3ABBB7D72D5F9B317705E9B6
AF1D5DB51BD63D1440680A7A3AFBFE040101090791602EDA496C0F2087145477
9C43AE85CC8F36815294F39D550ED291652BA98577A8FC76893C24E336D38B6B
6A1655F1CC75D367C4C84A502C07A5C730D1B39F6312F7B937A58A9BB4E74582
6FD2E0610E512AABC6C1E0208BF3847B388536F710D414462517E670FD64EB5E
7D85E20A5A680A1D2FBE871FC19BFD5D6AC7E825E20DDE4FE9076A5AA6300516
822729FE1FED12C7B3CB8F048BAE346A94D35FC2AF9A36305E363E90B736F701
B0B62D5EAD301EBD8E5493657D6D8E9AD713EBAE90336BFCE45F11C6C0F59818
846E39B59F4E49E2CEFB4974FDFCDE776C35E295D9558ECBBB37B394C6217957
DC98877B09E348B5C2390801260EBDED6E729D5B74CDA3789C27C477C6986A32
85B2F3057BA9339824BE6ED97F91577980293B979136DF3172DCDC39FA88A8C0
F898AF5891402BE5F83B90803384FCB788BF1AD2BF8AC5B93CAAEFA88C79213C
7777F4CD6E16601211D1EBE911DC743856CCF4F5146FD0096B16F424D85799FC
D234A021877AD023406605E22467478DD4957DD96B7C7CA56A170F568688D9FF
C92A5766E491EBEF784041AACE77539DB46C17F1DB0CBEB303306F8C2A9E960C
DBF8B6E9F93C1DF9323D9FA28B69CDC4D62597FAA763EFB361D153AAB26269F2
EA0CF0B00E2EFE562007CD2AD81C7FB74CF8104F10BBAFB0E574CC4BCF2C09CF
7A19FF727D10C170716D9D85DCB0C9863BB90A393211EB417234A0265723B662
D40B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD85F4DFDA1A69D18A
95EF6E1C8A6EFEBAF9D3D0CBFD6FA67EA64945440BE6F34771C491C607BFB199
7469D73961C0E8DAEC14FC13ECF37514DBF9C5A991943BDBF66C0ACA84BEDF8B
54AFD478D9695FCAA0E4FA51CC6C3A84D3D5904EBBD089B189203DF7239A2394
F2B5338FB0603488E278EE68F3CE7397B142062BCD6A62AFF936B2ACEF919E57
21FA55672F22685B5305F5E84900C327E20248F7DDEC431EDFEF8F922EFEBD58
EDDA265414D834391381C29CAC17FACD0A2F071460BE0D3DC7F6450E768DDF4A
D39B8E27065A8D236EE9643C209A36CBC8AB1D87C7B3FDEAEBE82AC779558FA9
15EFAB7C582B6CFAF3F8B174B1223D531067BA929EABBE1404DC599682276A0C
03309EBD39951A398883FC919A711E8E891F64657D64B43EAF4ACBAC482D06AF
D458F0DC3F4885030096DEA6AF7AD28E2DD526D66EF00BB3F4970C162A20E2A0
3AFFF9D6B0AF70E1D643784CCA5F0B76FA16D597879F762BF7CE394D18DC76D2
06301A735F3377789FDAFC843F9B3B635BC7871DBCF2B8BE5E7E6290AB1C4B10
165DE8C3E9109949A8FC60CB19EAADBDA8CE8FA7FCCEDE1BD4B8566A268801A7
2428B8193F4A9F02506DAA39886CAC4D93D6E6823E197EEFB4A340040C1C50BA
4952CFE767074B3615FDB279B9BCC0993871E9718A75DFFFC74395B532A58983
B7E3AB32A13A3DC4FAE0E34E485C31FB2952DAD2A611798A9B23C8C0EE5E1CDE
0C9307615D2E9E878FB834D9FAC1883222A1C90CA4E940136520C8AF7DC481A5
C5E4287325A010FC44DCCA752F57806D70EABB20327400158978ABC35805453F
84CC5EEC991A5CDC8C33DADDDF82939669A03C2A9AFA9544CC0C8E8B145BCD2D
46280FDDDFC1EE81028E13027F26BABF3AE38AF0FE01279F319172E380341CAA
C7984BF444AC5EABFAB89FB9C1F083274F2033FCFCE759E760131E50759E39FF
EB314527A827D08C98A3F490025B20ABE6A0B3533F63E46DE52CC01A232C2456
EE913CABB9B2A1CDF4941A711F25E4FBAEBDE4CC1F74F1000A12E26A6D031971
0517916D0CF980211650F7FD1D657C31646B088CB2E68751997E96F9ED7A2E4D
CC52B55ED92B262A3D33152BDA977F2CE166BCA591084EC06E047465134702C4
2C30D07D729FD4F2FCC3A6B97E1F5FFCC74ECC6BFED98F0D54D93AB3AE38D3F2
4C63EFD772D2AEAA4E15A612318059A253A0AB65B55F5603074825395A5BA3EC
EE5920BBAFFF7CBB603DE772DED3D1A91D12B97DA3233D0DEF0EFB5C0D91B2E0
D2B8482F60FE27680D2ACC6987BE974B04232D56DDA60AD254989A8D8BF548D0
B7DECC04E1E7C16CADF953706FC7265E38CC326BF63BA1331B9C1D9CFE9B875E
8F942D63874E43A202003126983D7EA0A161D1C416AC85C18B00809007CD86D2
AA045ED8F5B22144D82C90F5D0F35F19331CDA93CF358AB9FC23F12BA3BAD27A
858258D281CD39C7B4AEBDA5D1CFFFAF6EBBE3E5F0B87991EEAAAFC3D114E7F3
27220DC330236F7133F753DEF7B4BD81EBED69E888FBA1E2544DE0BB152A0901
F7BCE5AB60AC1B2610D72BF5C0832AA63EE771FA86C4255200E413ADF00AF308
AD5D17115C5A9ECADBA6D09C0DFE7FF94D24AFBD6A25E1619AB855182AF6CB87
DEBD17C734D458EF91A79FF02649C4A34D08C01673BE73420ECC5675F16F8449
2B44C956493534E6C1666059F0C3A90756AF41813198777AF172C9F0D2824142
B1C19AD3A4E031800921996DF47454AAEA868C46162D1D7A3068B5A6204EBAEB
AD35AC7918A9C6F373314BDC5623F34A3E70CB6437C18A6FE63341D099B30191
D50286647B88115812329ABCADAF9CEB29E09A792E33194C43B1967864508357
A1401A456A310532D16EAA27D66EF271F9A2413631598808E0F91DBA758A23E5
15E9F5DA8DBD1FADA5AA86EE07E447D8FED8BFDB27007905BCB5DE70958048F0
37C56C14FDBCE691048469BC4EA67901A44E7A65D278EFE0C676826DBFC26847
4EA85AEE70F5BDB495EFF99DE85EE281228C7336E07F13DB4291CD8C64D1D3A2
85AE340C660B41F45BC90AA236495490F7D4F3C059CECBFBF7F20EC5431691AB
84C5EB4C3D782F2BB7EFF536480AA43F0D960075B606F7E768E0601144B6E3AF
224B6029ED2F2A0D5809CDE7AC5A7BE7A8356C867794DC13E51E59F5318F4010
195ED4B852061899B5682BD0A153C50E9529CCB01568B973ED254B7542D98406
43A543F4F6CC5AFEBD24496F195B123171A69B2D426181910E8EA5EBF6D1D457
66A76E48FB1F1C77F501C701C331D7ADFC2F884A7982D46C0CF0FF79BB3E2DBE
05B84A93E0E8625B0F6ACF7A1A381FF672442A66A601DE0AF5CD890470ADEC51
2F6B53D0AF465F7316E568E305EAC163090F34190FDBDB306D7C787BDFC298BE
5464E1FDE8190F9072532AE3366CD16105E69CE728BE4B59E52034DC76B823D6
1F924CD89FF87DFBC5C11DE25BE6C2B3EFFBCF13A0DEF6B821E75DADFFFA12E4
4CBA89FEB4B84CC0A3F6C83983C34ABF30D087486080AE6CFF26CAD0774AB3D7
4F9B3F6FCA1736C911E3A9AC9C7D0FF2DDE602AA2B60DCE5E847DA9A5EBF5C86
B6AEF318B1F51BA4B0A7B2EBD8C0F87BC43B7676E7189564F32F011D83486E46
78BAF7618D338B7DED771F48C920BD1B21291DB4D4F2E49A78468554AC4FD182
CE434B877B0A4DF791E003C69DDAE26CA9835EF718D03D7FB6D011B334001511
C4986997E6B8214150800DFD356E17240F6E16879B67B4841933195C2973A7D9
0C573F472668952881EA3F436A59392C7BF1F25E5AEEA53941F7DF54A2737D5C
244C8AE219B9424EC76075911C5B90FA361F274DFBE0AE16560BFF5C897A1477
441B037218C4B919EFC69766224D83461F0530CEE3B17B32722B35CCC391DB3F
7B7E87BD9D405F2E29BF660674457A70FC6D07ED8C313841A757C5FC51166D8E
74E342451F028511C383D5DB5CC7C08ACE7CDA3877D7DAEFFD706D7AF71665EE
B52FFB958D70206769D0BD38632F5A0C2ACD6FB58B840C6D14EE78FC84B1BD61
C526475C3F9233EACC2D796BA6CA1B93FA2783C18A7081BB5845B63E75F60EAB
D442FCC40EA91D47117C01D70565BAAC5D71B0F83384D9F9DA3D467CD7279701
7348ED2326877EF771E24ABDD91972D5DC7668A14389EB7B2E94D32ACA3A0D44
585E55AFD968135F6492A9381FAB1FCCAF24F94A68140F4D6AC48569F45B6D4B
76D2EF03924DB6ABD954BFF51D758526655FA1A05A37C9C749E2455ADD22C031
A2171426881BBE4090D1CBFC417D64363DAFA5ACDD46DD9F31BA6187C7631A9A
E9711B15D1F079A1F1FE5E41BDF893B2D17A40C2E96AF804EFE9ADEB1CEBA885
B2207D9B5468CD278CA322575D757D6913BC0A843C9E9E2483FEB60938D8A22A
0BFD9FFB6F3477436D8A52BE005914785697F92CB9FB262328AD657CD211EFD6
CD07430EA77886C705539766A4530B2C9F46095CEE1F3178AF9EBF10909FD3B7
A6B429489275571F6B7615B13EFC3101D7CDE5C93E5816581287CA52C91C95EB
0C9A32CCB2A51368021F0A9434130FE3C44F4D2F341BFAFEC3EF8FCEC1B58AA5
E9807DE85363DF1E41EA3199907C181EFFE0585E1BFE235F0A891F7FBB5D720C
D12A84394A1145E286DF190406402C4D5794E0AAC7FA7FB9B3C9047D61E684B2
FE5B64DDE29E63FDC9834197CB767E20783CDE28B04A9CD7AD5F1F5675D1E66D
3E2B8684EA2617E3AC75E355E30EABC358068F01E91C53FD0235370B0519ADE5
537CE1AAB5E47751602FCB23E7F4EB983887DA0C184E840147A73B0CDC20D0D9
55F69FD83787781F3770BC1D57AB4D4A86384F1B7D4995C7AF328A602C15D792
F53349D73B72ABA08A0BDE73DFB8C18B3B768CD674766075BA04259ADA6349FA
0AFCA7FE64093067B59BAFEC5FB40AC71FF5B0E9BE89FEB4B84CC0A3F6D645C8
EF488DC0B1131513D608386B7C91D8DD3252160F7A64971F9809547F161ED2C6
D9BF11A9764AB1C9869A5A6CAB2E371C69C1A09438B4532C0477B6F95F42A87E
513FCD4D3DD41679D4E509B028B5C4081FABC430198AE7D42E125FC003D7BFAF
8C9FDC2480BC8223B359DA5AD05039EDC7280BD9F16552655E76DD0CDADEFC54
FDED78A9446ADACB1F10AE1D12B734760DEF15804BADB8D4AE414A1410886EFF
8D547F888B74F9FC08D98CAFC92EA0B6BBE53ADC954B9B3B39D13B8A00CAB588
BFE6B370E2517839D51030B695AD724D20DE4C1F23B16A9440AD00F6BA5601CE
B6D079BE810211F9EC62467E98ECE66B329193EB624E2D0FFB91D32035A599C5
8E9CB8EAE9A2064A6CD3A2BD1F60148D9CA0C0B1F1BC92D2D6D0711332EB581C
E1C6E0EFD92594ED766B8E2272B3FEECC7E148D5FDA02F3A6FFD579787DB2082
D0D84D0E0B99B789736594D7F6C77E2497666F0777096AC9FFF055B087C94886
F0C838990E66EFACF92C9B6376843D91DA00229226A37259CFB0AD3BC263B738
E414B55590E4E80363ED65AC938C70A961797ABA5075207387B7F51E4214CDEB
B2918B967245F5301C4A66D911FDA96337E7B1DD90A0DB595218F5FD9CEEF9D0
7B35347430A1B8925505F577DFD54583F0B424AA60711B2823E29732E0137CCA
FE5645BCA87F9A6D505AC8EA7DA551456B4345FA906335E8984C025B56853237
DDF6C5684A3CB6B9D260CF6F15B07CC7FC62C08F07AF1841DC38182D7A75639B
23267682AF79DE5C858C411C83DBAE77649D537E9A30CB7E4BB77BAC029625D4
D777C29B91B30C60AE2F9DC498ABD700C8FF81E8B58F2F29E1E94F2CC82862A9
D83339DB86C1935F61CB35B51730CB8CC9D4D91147D370D7394877C88A417AB4
FA50E4DA41AFB4FE61D19A6369D727359A919BE279225BE7C14C1FB2859307CB
ADC31A10B77FC3E102F18201468FE0C18E67579C4C1D9A9901B1B4D21F131F43
A02741814FE0653D003F4AF77ACD1B3110DFE711E9880BF43910622D6384292A
2E1CD061B024FC2B0C10B4F145C265DD5F8A624BC961432EDDE4307CC1AAA21B
870398665AA0464710A846F7E71AF3D7FC39994B3930CFC5107F9AB252D7C780
6F1AA56FA228938A15CA102D2CC21A7879BCD7F2EDF837CF9A2A95D3046DF9B4
9BA0D60A477D97686B4E0BD75A441454DD5CF67CF8FE5E3CBC8DDC94775340D3
C82635F772566A9F6922B171F6E0CE16372B46DA3A7B8601110A3CD668D7703F
07B78E7A832C5D3C7159A63851DF83148C2024D3FE96CAEF69A9C5774D21E5A2
8DCB5D3CC66376C9315FC17D920874B55A2F39C363ADB401706B6C04B0C42EA2
F42EBDEFF4C2DD56DCFAD9629F83108462542854DCB7FAC50FA86A6CA6F964D4
12D86A9D248E437C45E187BBEFC47F9168C4B2B884571D386A9BD86A66B47E24
B3E6BE9C8EC09DABFFE3B37165DC1DC80D60064EC222FE14029C35C687CBB7DB
AEF244A363A7E4F5C1F2E6215DCD692CDF8BA0FE38D3A01DF7FFBF66F347EE1D
6DB95461595C9938581921663D3840F533A0A25549721103667E88138D473DCB
FDA8573A59DD236879F0449F81590719B93DD37F43105711E59895AA5439633D
B73F31B0FF94968EF45D9E2075CCAD8954123ECF3A493908FFFE245A9BD0CD9E
4DC0093996C0924D9719D633875594945F07C96C9F63591F45AD67FE3782912C
97A81857BEDF5CC7E2D99B4D6F35854A959D0F70E81FE8C314E4C8A40BF87616
550D865DAC81E58FBE7698C454747FE750F2661627190A1100231AE43A0B3A08
E75CB14134A344E580B2FA60C3EDADAA898C70ACAF5D1E7816A4402F7733CFAF
7797CF871291BD6A3713B561F3300340A315CA76C77112D3CF44630A285F751D
AFEDC3E3D3D51F61AF2B1228EECCB493A9E4A67EA6C5EC3072D8E15B0306CCC6
E9355C9A37ECA08C8BFC9A9956FDFC914BA1149810446096003A5F7A5A88AD6F
BC2E70951CFE7F75F3FF8F5DC119D8E44CAD375F74F86A820A610E07672ECFF8
E401E4DE6419D743FF9D0EFCD2C3A5A28F19B0EE01E70E6C1F3DDDF783E0F121
D39E71BF9F86921DDFAD47AD9AF555DBE95C93498E26B3A7B8B17F1E05C56E94
1651E32450AE35835B40EC27B7ED3E03770C23A83FC926E4E49C0DDA6FCBF266
295BE92A624BCE6EE9EEF09589FEAD414C2D813D247827B40DC36A2CBA4A701C
45942DB1C919ED76848D88A376515078360765E69141F72141640FD37ABE73C1
F3A3D0148384AB91B325FF1E458ADBCB1B6506702ED1B628E6C5A586638CE50C
BED2257B820AB36984788E2229F94F3B360D1F7D0B7CE61AEDAAEF98864FC697
D7EF3EE7745D6460F94622AC516E9D777D6C653CA6401014A3A628D302697B41
25B5FFD2CB27C6DDBA44503F12E20CD44F485912FF174540468AB1C1C5BB7A3D
29BD773553E69D68E57589A437A6CFF712A5A5B7750625E647FE68CAE7989878
5FA360DBA40DCC1F7945FCC110281E5EDD5DEAA97BC86C948570063933291D78
AB552E108517971542915D70737B3F22C6A831A9821624AD6DA67C0021B9D29C
89BD121E69EDDEC575B281609ABCA816F50F406270CF873290E99A3BD506A857
8376F788C8DA6C6C6E5D31AD786B21460F0E8C1C2FB569BD405234645170437D
1AD9B992FF3092CACE0E6A101E1F33FE3053B14EC4BA6D11343AD3B5D2A86449
8651C5705B1DFC310087FF394717EFD48403E301699E50BB542741359780C131
611B0EE9A983FADCC302B6E3FDE8F35C619C52A29331C14E263C15078FCB6FF6
51F45CC360CED9295553A654485E27FC13792BF8598783704E8026D233EEEF4C
8E401646F45EA63BA74EBBC62EB7903268006A9B683687ABC3D34172433CC652
E9B2516AD0EEC9F452135BF30C497704AD5892D7F2E681EB1EA12AE2DC994A26
1023C78CB20E96570097176033A7A3ABA468FA39B0960AD4FFFE53F7656E408C
DD8A3C8215D594C6B911EBCB4FDDB4C6DA11F0F93958C2F72B64C2FC91D0F560
ABF27CC533937CC31688C203C69145F8F20DBE256AECFE77141F4F68DED3488E
B9ABDBCE6E73EC5A0AD42D773507EE1C4864AF6B9D3EA5F9A365966424B74C14
6E164A700551CEBE40A55B3DA6DDBDD8E8C6011903736F02F048D78958427246
825F500B2E3F122BAB87AC6013256EFDEA3C0D5B891D02E7E6FED2DFCBBDCF48
A0B80C8864D21E57F453ACBE58FCF00884C57203C04E1946C6448D322774EC3C
021801FC7A6AEF112861D3AE8329B2FD118E30249356CDD3C9CCD2B2920B0E6D
E7AC48AB35527B09BB7691BBF8C1F6E81E1583D8BC0CEF169B7166EADDB8CAB5
E73CE6828C8EF98CF9076B92DBC1F0326671B31AA1E693DE59D056F3BD2C441B
6ABD8FA8A63C40883EDC781799C53C79CE38C3D629DACE0B9C314DF9BB5C299B
3D796D1A89F8E50C49963ECD5CBAED450D75A5157273EE81DC440715F5D60F77
7A4613569ED2D20E919ED2E0064E5832E86066A93898AAD99125133F8C071A0D
DFC0912B6DAE4D752399F99D1DEC54D16CF7C29CBEB87F1A2107E637AB28ECC7
DB231C756AA5BAFCB4F1BBB90B667AF65117FFED0FCE12EF12A2F2EB26365BE6
8F26AE3B0BFD0E16918EC3051AA570E1642FB8CD588892E250273F50B397D227
2F029FDD3EC354A4FFDF6937AAB2EBFEB916F5CB9182CCF13747D153C865479D
7AA780EEC575BBDAB8B7A44E3376A51DEB61C70BE93B5974F79EF7E126534321
46A438E0BA34676951BA27D3989C7762B26B548A4E499DCB965E630F885DC98E
4C886E696EC40F317D6BD82D2BB90DD073F21830C0C298C46FA3F5E9B6F04779
34A0090F6B88453A940CA637FA626CE0CDDDF5396A12B76FAFBA21CC46BB3207
C88DCA2968DD4EFC2DB3BDE80BBB0BB95F153618BECFECC576E16E367D09E766
AF211BFCFA59A1BC810EFC451D301CAF5379774488DCB87E4631710BD7A41786
EC95A968DFC459BD3B732BE122489E13ABFD0C553C194975AADDD2CAE9D5127A
64C5FD510C70C2DCFDCD966B1178B9287CEAF6FDA79F74E5EAED3574E7627C85
C64AC5B8EF65D2806AF85DDE19C4354C186F82025007689F88CCA71F9AC578CC
B077D3D7C6BBCB6B2508D429C6258577EE576AC6981C5EDD4DA8045798BBD32D
C797ACB1D76CD94959B982DACEE65E328792557CEA6E29967CC990CEB7C93BF2
AFF836016EF45BEE1009C32695039091179DED90AC8FB82942F62E6DB49A2814
8A613ECAA9B01B8BB97A08F02502D8D21DDF69BFB621DFBF41ECEC87E538CD1A
1321C1861B3F80AA4C1A08E558A298B193C8333468A716EB3616C7EDDA3AD5A8
4A6164F34C77495827497431F98163985BDEB5A7514DF1B70280B39BA9AAE341
2961E5A26B1EA41D413A25EBA60779092387129FBA29B84E42C46AB395DF2915
32FE0F23C24FB309AA1810D3645A5680ADED6F16E1A7B01659862698D3BF4499
3D405B52C19A56E3CE09F84C43A92A7AA8301DEC9AC0A8C0B64DA787E5CEF83B
D4FB308B5C40066935F3CFE0F0DE5A3A0579C18A3F5975DADE436719AC3EC277
6E26A84887401DA47D0C6E6B0E7AB62097795DB487E1303D8A9FD722C5A35F1E
9A597D38A3D217A32FF0E1ED9254513D20A176D9170801D70C1FFA270D8965E9
6C4745D579B4E033C4587C09CFB052316DE2D3FD11DF2AA880185245D09A6F2E
FB6B098572650C76E16D3E61F8C996A63A3794B34A362F40DA58B8F4BD7418CF
36C183F1950C5479E19488E270BAB33AECBA86DAAE03C52C6D9EE41C1B997884
75A7C16ECED1C3854C69BE4101DFDDA52257BB25E75F908D735F95750A16EC23
7A4793CCA23D74147D520CA0B4FC1DBF8928A359DDF40EFDE12D1124C8AD7D1F
69546B94E51CE6D3D99801F5D4778B2A1B122C48002038833A7D1FBE2D87AC66
B8ECF62E3AB2CB8EC208129C748BD8938904A1A8DA2CE96FE84110120D0D6F9F
3C3BC7C2D5BC648960952D93E3AB87C6545E894C87A9B1EC61439C5F412A8ACE
9A169FDF945D77446ECDDB45CBF6BC6792EE82A0A0F9B9DC950F1CACB4B2F537
DB6411544DD9F76138819BC4860C7D3002F55F78DF1A50D28799949E73C77ED8
B12BB6C4B0B7423774BED69294758ACA2BDB0084E51CE7055B49B6F3890D8975
9D35CAC04FE7F759191B9776AAC2E0DEFD1F65B02A93B66C2448893E3C0449CE
B780CA376F1E33EAF9B30B4FCDCFC8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB7C1A7BE
4066E1E941A608D1ABEE882F8B8E7E3B735838A7FE08025B5CA3639451BFACB4
AC69B3D95585EF78B1D0F72CE3FE6E475E5D061105933646FF7EA81B5026C7E1
EF4FDDFF62E82B16CBE3D401AAFA438728BB0FDE9646FB43EC0BB1B1B13D8AD0
FB57C47730284B10206538F39266CAFFDF5AAF91F50D9A6BA11AB1CA63733222
7862E5A9B3E0803A0D5BF68BBB1CB17E81309C2D0D216810EF913F89FE8C0753
FA7B1E1DC8DE5ECA1CD63426A8E4E7CB38AFC5182F5316CF7740897FD5C21A61
5694450C2484D2F8981179916903E547C2DD025DDEF4F5C9E8C55C0AC09CE5E0
1625937835AE6667F1C0B014E2B65B5F5F7F4365078423370291D022FF36A77A
CF1D63F03EFA1CBD82E20C83C4A92515290E5272B2C64B118FCF2F9D921679AD
65165D1D8EF7FF853BE5C14FE3F01BB259F9C797559384A596709ABE6306D6B1
25F5D41C3464E5D8935B8D5F3AD04CC1EEDFBFDE9B94904E01F32236D7FD2985
DFDB66C4C86B336608F1B0D2EA2D5B3CE7EF8A1FF6E075B1C82C62D97159E931
DE3D95C1DEAD63620AE1897EE15469348EE86E66E947C4C217EDDBEDCF56CAC3
95D1B1542BDDF61AAA73AC095D7371426BFA8B7475FA560F981A1ED5898236F6
E9EAC037476113326604E56F26766ABFBD023FAF181C7F095932DCFE512A9C6F
7565E6275FFDCF96CB8296AD023ECB8F8B6686EC19E44FCF478692CB50196417
B66E80E620F08AE3B3EA756500D5ABA42B790C09EE3512A6FBBF6937101DB285
2BD7FF5A5D60D9069AF2FDB5E648EC3E8DF28E21A97D4644D6A81199894BE738
D2861F785E8E3FB253DB86BC593FB3A500A7458FBF7201DE96D67141582D0C81
7460440F4F034DF85A53E295A7DAFD4A90FC79845CACC3ADD7BD4996D09A2849
388A229777BBAE47CD1B4DA3A0555DBDF387FB03A42C1841EECB1544BB66DE86
7070636506EE806011CFFE9ED1F9B8D01E04A4120817A9E330F8FAE0FC5429C6
CFBBCEB3D19AC0B4F8781E38F6307342CD2F7BF00145FE7EC5AAAAF91ED6EE96
8AD66D397D97A33B2F0742107472F3F95A041447DC110FC52BB9D4A3B6736B62
942FA3889A9383F128855CDD17E51BDD74FEB56338CE448889F8E188FC9F72D9
0871BFB4ED94B283EDF91218951631D8ECD4F79371693A07F066D9FB4972A16F
1295B6F30325C2CA0F6211EB4D6771F051784EE87D37587833A8143DCAA13393
C7E2EA7175C8EAC00BD1F79CBA9317BB0D0444E8F1972F238E0AD451F8A1553B
497B4F40B9B30A03112B622E79CE32F917586BB8E912D3C9C40711F0914309D0
888E82005638CE94BA4AB984CA25637BC5435057FA704FAA314DA472F556097A
243B84F8A2ADF7F122E32AF9B8D546196E0A2D041D13BBE6E89A791E7AFE9EDE
67A060A999545C297D58FEF52EFF4C9C1A1EA54AE8F13A9B3A4F68F111AD6416
6C2815EA0650A5B047536CA00A89351EDD8D01D400A5AEE15B7C4C67BC4A5D5C
9D9AD927B44A93C7E881373EAED2D249CCDD69696ACD5723358F2A1399C8747D
AF061F31435CC4A5385AD309E7AAC8EE2560C6A84169B3C46E7CBE8BC5AC60FA
C99555F31208C467BD52B55962CB42F76C5A3A40A8E91993AD4DAAD01184DAEE
5A9048BA08BB2E5F59DF4250AE578EDAEDCF98D7AD3A56F3D33D6EBFA8BC8610
3F6B180021833DA5BF63A4018308D168F30EDA91CA42EB4B9EA6436DE2B51892
DE295E999123CEF212244F963986BC89C3089D9CC6D2D09BD826FEC5AE709703
0645A68CC470C526B9A808A591B5B87DAA7F402146A3F550C4A200FA3CE3BEFE
DAA91F26DCCA3506749AB35D38E6800B8126088054C96AC98E57ABB62901F796
64C9DFFB9329A7A0BE9FEA4F8B335F31C97B692414333B1278E3F17EC0C2A7ED
FF6862A6FA467B4702BE4296D738783980139449F1DEB938EB1C057E2FB2780C
DF8BCA8F81248D40A8439D54D984D127C9BC9BA5AA0EB2DF0576BD6AA67D0839
91807CA54FA1A9CB6587BF3C9125450DC1A6980359FC033EC76DCD4A28CDED09
47AC99CF3E87CB54C438515138A81C4B6A07118D691DBEEDC11200A99E4E2553
9EE60FE71D54C7C40E24EB786BF7FB11608461BD6B14E8793F0D2874004EECD2
374AE32CA9AC8590B7F133C7336EDB5EE02ABDAC5A4A9A243E7986AD61E3E07C
D4557068298A3894E58AD12329FE963EE9E6A7A5FA4FDA7044C282CF62EF9A43
53996AB32573B8257868A7A3847143D95B80344D1F0ED83E2F697D6DC5CFCBE5
BF3F6AE643C1D6A9937470F135057E79747D0FCEC9CF6E19FD64608463410DF5
7EFB64562664077DB0BE7B69B1E20042209A0F60899F6CEDF2011A1014AF5CE2
0DE958735EDC779E042B592698272F2A669230E014BF2D1F673E7DE9341FDDD0
D5D58EB6888B3E7D332129C09678A6C10394B4B08251A6AA3BB89680037E9169
2CF5C7988A6B727C5C94E75EE5ABA25410C40E4564C59CCC1542F3966AF0F56A
1167FF037C76C6E3A18F698FF43451F97C113696F98F843367BA939B65683E6C
CCDE8A93C3E0CD721D73D2C05E32D6CD12F3529BD059EDCDACA9892787107616
98B075DAAAF088A2A298CFDDE0AD968EEFD75F7C68B2070E1F75CBB5FAE0BFE9
F41CF5ADD1BD92B57772832CCC92FE671C6D8A792BFB56764D340A5733AAE867
78CD2B27750AF6AB9AD274DE1242F83232C099EE818F187C445C4223DA9B84EC
122FC01928957DF01207351B4A1C8240B43D076E45A7C3A7AAD80A1E79150E5D
B7EB209E6F00EEF6A460E4E6208CB76F7B9D0CE4C6D448A482EBF6E611CDB0AC
5D908441B8D5B301C0CB436EBB3648054A4E87BE71A231D38C1B3676A20AFD77
F3C78C8C67CCE8ECAD6BD98FB282E1D5B3F2FE0BFCBEBAD9DABAC4BCF7458A66
F0217EEBA127773D7C66F711FA13D0368D056E8567B87789021D48DA9EBC5EC0
A2764C46D290EA2E3FEB6635DF9D0619027CDCB82328CC8A99E10D49D3DC3E27
1A0BF95614B2F3A586BFEE383C06E0FAF4AB336E61C06D9E9595DBFA483D9B21
6C9D1F30A84D27AEFFCFF1CF24E007065025BE0544AFBD594A6386BE008D03EE
07997A7A6A831C9F912D2113EC6D1CBDCA4F94CA3B5902C78297CC51B6064315
DE0BB7BD4D9EE1EAC62FF4E03D607A6033008365148E86B2450F188352D190EF
09D9FD85DF2958FE21400A1D984F73C80881723A9006B9ED1591DD59AE4DF437
FDCD6D2AFF00DEACAD5C051B92A84014A20D9C2CBB55FD82FACBE6C42B3DD047
152E8EDFC9DB2D9AC6C2975688F1D69B17FC27174AD58A8800D169F95EF9E89D
1342C68CD84DF535C0273CFF73D0ACE2D910140A2C7906E54CD59E56C0CD4C28
1865EEE47FDA60CDDD9595628168A9F146AE2961424CDD58C1CCCEB9C38FEFBC
DD0EED16D521D5550BD6E052427C17DF4DB280F4644E42B3B5C6197B305792FE
947135DAC71B1F75E4145F69ECA67EEF8F41EA813D4A201147507A9A665F3118
828DBAD58280D353CD392BAEF272C7D76108F42D60653E51A58719CCA0D151B1
869E0B4564F77541436DEF3DE59145BDD7BB9CEEE3E80DBAF2D2911636B2ADF2
155757A9CF37E57D6B877DDC1F4FE8E891C5077C93EA5341B42009A5A965FF6F
1B6B3DE223E41D0959EDC02FE25DAA4F81754115F022C6973269991BEDC51FBB
73628B1EB5D7BBE41FDDD12A4BD78519F357870E48828B521C9976CF82BEF3EB
6F5BC13714BD0F1E1440D617E5928487829E2F9D5C70CCAF66A9AA939A85DDB5
0E4D407E12C5394FB7FCDFF81C075EB7B3EFD5799CAE0E4338791E342DE62B00
A0420008E56112CBFE20C2CB367DA60780525BA9D0C04CBF945C336D32A05D1F
38C630D690885A26B673D5EACFE8743CF744FF0B2772E94A3C2EBA0F12E9525E
E3AC4F75C51BFF0C624925C5C59C5FF1D8B18EDA93D16DB755F16BF9B9DB73D1
7FED0C955594188439D2B097323CC0A6D590830601669EC0C633FD9E64A062B1
3A03D8003899054B662E3252A2BF45548AC047E72FCB199BA9550C0B3BE1750C
DB3868C61BCB0AF6742D33D516A49C6140C40ADFA1C1BCE7D6E74604F5EA52C4
F4A5084219B93D57129272BD1727AA4430AFAE86F57C1DE6A06D049ADDB89075
365CB56AED02CF91C6D34297DD2C7AFF82CDB5AB8D3F3437D08DE00776994357
22B0C74D3EB3F22A33521587AE2320561C7A4879B7921FCF83661FE81F5CAC0E
D9B7FE3372D2E2260677B7BCE2025CF19420A28D58B2851A230193EFE7624227
E5A64F678E885E695B3126DF7593F9D14310EE447969C78FB3C16EEE9D33F3DA
59464737CB2BCBB06F1F5DDEB5AE0BCE68D6789A8DD6B945EE2710EAB6F56908
C062C8702BF999CF15E8B9CD0EE0EF1325925B11099AEC5656A398F91CB6A0D7
9927E5A20452978F1C9C1FBE211F2F32DF04674CF6AF7DBD9D544E726656AA3F
6906F86CFA9C7277C81EB05DBC5490FE6CE396BA80C39BE5F5B1B85E49459C99
CA060303D4E9024E2FC0AC63896BA200010B20D2B4168B78DD1391DA88EBDEE1
096F023A9AEDC832D25480EDE5C0FD2409813BF08036271FE26DC6B7D8E5CBD7
9BA8A71FAD14B867D1488F7EBD0E7F45B34400A00922416363175CF16AFC1079
E1E2B964C0E5556EC3339016C101F82D85E2103A0975B4EF9BA4AE3422593130
F5768498FD0214204D06AAEB7068E67E8035E970F850C583759F165A7A300FA9
F311BA307520F602FE031631ADD158E5F83C1FB291E4F6A53B5997EC6DBBD360
70A0248D3A470DCF47B9BC988233EB1DBE9CC9C4D24C117F12E8B6FB748132F5
7591998FA02EB79B20490527EA64F7E21229841B3B7F09EC4EBB1555F3A5DBC8
0B047DB5AB3627EF83254BE3A77B547586718BB70818575318B3914ED4777143
2089CDCF0673608A507DBC5B7A5CCA42F109A23AABED9B49E4CBA25AA870AC6A
2B5F89D8C41C45C974F61EC6765364AC5360AFAD5EA4ECBC1DBF4F5F268155E0
32C09995A2718FC8F951C553F14D9D9FB97ACDC155305CE6BD6692797A1C6211
C33329346F5BE921E340FE3BB051C8F9C1FD804E7ECDEC12750881C8F0E67D08
725F96635433464008556E5706C12BD50E0FF5F336799AA094AE6EADF819FB6B
201647114F1ACB6C13AD0522671F30F81D3AF9CA9BF9F122F5B61E737C7F59DB
67CF468ED6FFCB4B6069845CC3D2500B76958893C4866CDF2D80886A8FD792F8
F649EDE65556FA9CF57C6ABEB948D6224F4ADF65DED315E2E7CB349FB139F574
CD06A8205FB65FC139252E08715C7701C683B241D290BF0EA5E84951CCCDEBA9
01A61995630500158C9D5B619BC951789D7FA0B7CB0C7CF4800890D2D08CD4D3
30D006EFFDD4CCD2D21B9026510EEB5D83BA56D26A497CA3CA6E06BF36417F2B
EDE5464CA225675ED793775A51AC2B9330D339DD8F3064C8E79723644A3300A5
66DBA6BAC10E7D4EC7A7298E0BDCEF37ED6F6813682249A7B1179B9AC6CF0229
4837FBE9F3F6952E9C9649E3704B34E42EA1776DA901D24FD05CEC651F5FD1FA
F320A657566D7DC1D8A7F029485F014C745A5B897D2C40D3126C426556062BFB
91D1C71966E89B90298BA837A415E119EEF96F32D836E6F5B30517B9F77A700D
EEDB6899D1FD88833A22D0B02490AE9E31570066E43CF00BB6A68949B547A032
408AB1CDFFEE95FE37D704A36C705515661823E59821D5EB077E609BCF908FCD
D5477480F304F470EF7F4BAA8D31490814AE79C364AC92652E15A675FBB9556F
59228BAE108CFD59735A6BB842D28284576F32CDD1D76326ACAEA748945C4B50
69A396B076A411BBACFC36EB1C7A4C4A3CD8FF92E79096673A3E0CDB314DAEDC
5F8143AA0FC229B9D6FC78F584BA6F9445F96ED5BEF160645B8E93D2A2DEED75
0ADE9D20120397399DECD5AE7C3C4F917AF870FCDE965EF338136B8E0F334F89
C930A324607CDC55F9B0ACB89FABFF923C088128E68FBD2106941A15F0B89187
AE1385BCBC740E4A4128D105B3EEB5413E590C70F4153A1A6E9269D42CB1D918
41CA68708A1AEDF4374F1B38589C99C6201AE3A5D73EACDB5F96385C6BAD210F
53BBDD918F47ACD2EACC6081ECB91149351308EAEECF5E5C875D73AC2CD90667
467E5B8D34D9FAB9DD569BAFB5F4ACD8D377A6EAF8142382D415CED4329E1052
D9846E334512C9FE358676A86D455BAA514D0D5F30341BD20F8949082F727992
2B339CD81A0F718338786E75486134DA838FAED9384D16547007A56F962D53EE
15807F8CCB7EB8EFC0D1F85A05E8BA2E83EA68DDEED65FE1CAFC18183FC66417
A65A107B5358E31D6CEDEEA34BBF92C16CB77501ACAB11C600D0C1FA936F933E
A77AF4C2690C313D3DF9C0D3E746759C0311CF751EC6E62524E33106DDAD9BC7
0B608418DB6BA9E5CEF11365AEB5B14CD529A0A9726EF161C1075E713486AFD6
A5D91D71B66480ECE953239574BF41C1F4E3BFE9F2D1910E46790A82966649F1
C7EAA1921A6D1E5A1DC0C20B1BA3A75685F910435BEFE6E7067D54DD096B58F6
DAEC4E01BE47A0D1337982DE87D5A8DC6D67E1BD349BDF0871FF84177F1EEE96
30491278DEEFB23A6FD8E40EFF4591BBE18A3EE4B79619524FD0AE43C3EBCDA1
83BCD626451B85DB697907F7B254C48436EA768CAFDEEB029D3E5C1775E74589
C79595D47BD4530A9263B57154FB1008B69C1E5299FB0A26CB0860E8A57ABE37
7A1ABF55911F0AE51CBDA13A72EE8DF1F5ED444280851C420E005070449354FF
090DFFEFCC8B6E7DE71AC716443491547BA1A0568847F72F835704DB3E135B18
863164DADE3A0597C4B2EAF8B0C54A1F7EA70A6F2A77E8375CA8A0FA75AD144F
21AC14AF18FFD24F65C94C8961C4816F6058C25BAA32C3CF32BF91431CF50991
159DE9BFB49023914AD6C6C28C3031210EA0C00EDB42689C8165806845EAAA6A
6C369AC07779ED909CBB8E795482AC250112C9C220CEF2C1CF746DEA40B58D82
8737BC7BE7BD7CA3A0B1EE6E82E1D6D873CF90C29405C95E0C6FB0DF6A5E2F77
82CDCFBE53E7BFEDC6709ECAF067C5895E0F7D48F77D164E7F16A3DCDD9508AF
FE0FD2805F78D8328450A89E9EE68C67A23A9AEC0C74B146435F407007F2C48E
FC3515A9F189F48EF521B08BE024B88A8C01C1522B9D28405DD4BF53D34440FB
5E5D858EF1F18DF909A9F6D02B7451EEBC585CFD62952D694D75AD362C272110
B336AE71D8EEDDBD4B16CE0ED7226F568B875232397BA7B203DF3DEB0018534C
C32E0C76FF86F1BCD224483F902B84CA12B70C1804C189DC7B1F059ED2ECD1D4
1BFCA57586B214F587F5557A2B9D873F8ED534CA4A1CA322E3E103EC6388B6C1
EF09AE21BD877D871BD8C5B67C9689A78DAA51F7DB35DA3C7043DD81C622FAF1
D00A8ACFBCC3C31C71A51E191337779B6568F13B9FF09C333264ADCB4B3E7853

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC13F154032A
A1C45D1A3DD9230A4903FE5523D6EE9BC66EF49B2617BE3C1AEBFE2BE26C3778
EE778AB577C5B9E476CBB0EF69EEE350BBEA9712CD97BB2821612964B30B01E7
B08AE39BC8B715A5C11A351E060C8ACCC73F7D8B3B33CB35844961E68842CFC3
601BD2FED84DC32546F253D218276A5D0FA4EA5B7097CF596003D3617599B54F
1906A591A51E07E62033C058BC757D174B90F05D39F5768E81C9D713F998B6BA
743C51CFA8255B90F4E82F3C619A92AECE2660BD3019B098629A171AB308C6DE
05CEF99710AF2F9E27704C61242B4B1983A5D0B134C8052495CBAA9D2860D28A
6887CEEE576D4111DBFDCFE9B3458F27264F85501EB8C86C9A1BBDF3E1C9FA6D
058BE17FE12B410940A6DFD0667DC444D6342205506A827D20B87734D27AFAA0
23B97C367CEF276C725B73F6E2282EF693BFCD7FD07158CECA1F10A5D75C8B02
FB448272CA2826E882D4FF6143BB5933AE882A540B806AB24350A792BFB5004B
54A8631F85FF8DEF675A72FA6DB3EDD6C586F5C0FC8BCC3D355A4F3C7BB8FF01
13F574C1BFA5A90471B7D471C3BDB86F519E59A0C711962F9EC04E63E90381E3
A52638877B18EC6582059C00D8FB590080B9F865D19D39B03D577C85C3A6B25C
BD5B84446144E22D8BF12DE44EC69231F93CFF3D70D84F79EE7A2B16F6E7154C
5700378C724797BE7D5EB8BF9DB860D1A3B1D4E0739E94D61AB37B6A19F959EE
20C356B2DA3ACE94E43ED42A06E762ED399892BE451C923DE1BB1F1CFF7FBC47
340BF6C117E621CFC9E65D46763364B28BD51FA22EE09D57EC86A35BBB05098A
ED54585CB5D11B12B3F992F6D9FA3E25086393D9C42E4C00AE7B6B014EAE4513
4AE34CA73B1499B395127BF2453FB7F04A266A9049162214CA44A7392D8E791D
5EC029EA422ACD7F51F051E0070DADDBD3F1189884B2F48FD7E2FD12E40643FE
B009049940F99DD80DD545C41A52C1EC6CF5AB09BB417C53E03F038E7BAB4C52
D67CE0C854A7BB1114A2B8D6D643337FDE0A9B6AEEDA82D6DE48067B62F46D8C
C04C6E35D6BE15470AA3A7F8445ACA65D9B447685AC169AFD69C818410215473
5D0828A9463A58710EF1A3BE6837736D765194A8895820176A491A259B012DCA
DFEB8FE96C49A1D803C4EB8020B6BAEA2CC6549D68A478E7DAA3FE206417D0C4
3C21A8F8110A6F1BA6FEBA93505EB07154DEBB52B79035787CA842053C119ECE
E2F49FEDA5B3262724F59B94B56DE90283762771725A7E2D8833C4282A2426B0
BFEF43388905170F1D5C3C48181BE3152D2A94C9E3F324BE1B44FDDD59827A25
2CB819CA3CD2D68EC6563CA73B0BF0D53BC5CC5DE889C15C8CBBD83005D8EBA6
244D7FB96F3E09EB1562468423F0C912C7917C71E98D9B780EBAC186DE2E1CF8
484385AC5E334D9D374A9C1B6C0368B6486A3D0662464182F22F4D29ECF78540
427039371C045B266FF717BA92745379D6645D0908A9F5DE65F7AE355C2A5725
79C2D52B3DE5380630A194F8DD60AD0138F1A3425B0FB08C7BBE9242FB65D39E
7085771859C7732BD57F0222369E282622FA6C76F04451E1282A2432E88FF458
6E9AC050E7001000B2C6848457D632AF0F1DCFFB6E5DEF54A2AA6DACF72875A1
4B47F6C762A76900B8B7701B1C866536E456C00A92BAD2DD31D36979C599C985
7D33CFD614E6D82DF617F77EAB048E71B51B3BA2558E28699AFCFDF239C4EC85
164189443C8B942BE6063CC134930B868DD9FC36A722247FA31962915384678F
184A66D911FDA9633767CC89A787F82D8BDC133929C8DE0FF82A43D64F468C73
A24EA2637C80EF0C68F8A268857C7C013561FCE2D5CC58CFB186696DB349B113
D3A4716D2FC8CAF0DAFB63A8C28130E1591CFE2B2F0CA3130E229B74A3CF91E2
599B2F6F443D3B9D0604D82887897B91EEAFB325B15F4038E34C9DBB2831E153
0145D80BA78103E405DD21F19215BC8F6D91D32ACA3A0D44585E55AFD968135F
6492A9381FA62C44ADDAD07A448C601D99BA80B0717ACC2B56CA5639FEF1618E
DF8B9BB56654411A74A23840473DFBA5CEE2728FD062DED1FC4552C0B714EEE9
BF2B469ECEE21795633202D1391D3AF0861323F6AEDD0DD902F01CE657FA9EEC
BF40F78F9F90BE865F80AF8E942C0ED4463DFF9BDF91470F1F5046C4AA13DFC4
A44A6FAD9F33F025219D0B26577B7BB0CDE3A7C8FCECC78B24441483A81439DA
A582C29703D842DAAB0F2610CB63FD7589ED5E0AC844080E415F258ACD43AA8B
F5B886DEC8866A40F7F7C34ED8E0B3E229BB4F2D5163CADE45AAD1016033DCD0
C2CD22BE72DFDB837525DE331C882BB3538E15B9C51825CD8F08BB468B69A205
720F50A5B6AF467503A980EE63D30AA01B660F61A250B9FA85515EC1C44391F8
6379819CDA882DE8975E9EA7072E1E30BFC10CA01F0688D97AD33009DF562792
A2BEE964931866CCD978AA1D3C9FB01DC28AFCF17C1A98F9326F554CA0F292A1
DE08E910B49BC32736D58E92505301EA4E9ACDC78B7676B6F9F61D0AC45C2A40
8489B8C7EBCE5C88EE8FDB5E300BCBBE9055293B5878339F2AC0A1EA53C13737
63DD88D0BD7C8B46BB47E63CED179B0F9340F6C78747E231118B8C09C04174BA
EF8DF1BB4A1E1F848C1A517B7395F6B9368142FCB34668AF303A6455B248FB86
6E275EECCE5A74D6E6A1BE31E078D0A011258412B9742EF082B1108DFC32842C
77AEA2D65DF9F64924357BEBD2219D8FA49A6B1525AD2D1F56968D9CFA81E052
87A25FC81B91DDCE0CA3E5B551096DD5762189E8BFD2D49D6F12246B7A514051
E6C273C5B044052117FE7E2E7467A552F704EBEAF9F9AF6A649DD0F7E5D01503
5AE1633C8085ECF572713053E92228384729609260D97F3F1DDF55DBD314B20F
9215B085F4E2BAC9E21E51A6C2EB39D37D74812C42DCF57F7A60DFBA63F534E0
3923EDA8E2FBACB8D3C58CCD07BFCAE08D822D897330AA18015EF8E9F24C2853
EC5DAAAA0A3CF68EE3BAEB4BAED70EA59FABA703E5B80877CF654EF3EA71F705
38ACF71EF764906D8CFBAB7D97A68771D1404671122FAB9D2378AF8F2833A93C
2EF999435D125AD82D5AEEE88205EFD6BD2888AFF0437A146EA84E470936DB78
B012C9C10DBEDDBB5AEA2FC9898DA8326F73B9DD481F44CB628AD27D75316E4A
85FA54621984332A3EFF9E93534A6E0062F71DEB7755974025F8048131E91D93
114E59B3A0D733E7723799D1406AC7C1639DB3FC58C3D050F82D7F40053C8059
5C830546E65DC7762A8B7FDB687D7D2DB3CC58FD9F9B40543F9323FAADBBAA0B
E425212EA91051E49072B3A86CE1EF9E57EF720F977DC0E6289A836E92C5AEAD
81524C6932935A96231D483FFE1EF0BC2B9F3AE2AD809E2F49D62E6F0C1D62CF
242FCA1AB94817DB232CF42BFD5FC04ECC5218D4C7264564C1A7F17C220DF312
D33508279355F50B3A93FF5A9AAC59730EBC1EB1C95BBFFA540E9A8D5AE2EE06
0536ACC6BA4DB60E86360C27040EECF434ACB9D781F108736190103372099326
B791B3A21B91E0DA345BE155913341C1B6F010F340E392BC7133EE7EE0A11E48
201EB6DE61D37C327D7743E6C96CB03FC5F08E494C81AFCF7F6676C2D4084784
6CAE65C6D08542BEB8A4DBD39D70259135A70E21FCB82D992B575B43288B1149
ED2098D87A468D0DB62647CA374188C7952E6E83292D310669289F0C2133C543
BCB734F552B860C295991CB99900BFE0BA28EEC69F3D249850CA604FE63612C6
DCE259E1AA7081E6541F58ED4D064D8C070C16D6E08A6F3F7927BB81081DE21A
F12C1240C546FDCE37A329E5F0C0AE5B51CAE4A2C8BCEF17CB2C11544A72D5D5
98E63357CECF022E1B89133D47F48818EA420B016EBC630E536B596E142759F2
5C612EAA64C78322FB453772FEBBBE32E9A20B7C1A9B0ABB16CBDBDE0AE1B3DD
2B81EFDEA1AB7D34D9D96B514E496BB4EC0F0224BB155265E2EA7402BF17ECD7
1219A16E5A1B19AD7FB1D9090A4B43664EF0B17DC63B205A57438F4E2B5389C0
CAC1CCAE761DAF98DFD702EDAD43518F25A3EA0C485DD9ED6E3482283A4B961E
93C38E252F255C36B880618A96D5B23FF149A32B2BF0E6BA1DE5D3B93C3F008E
02FAD1554BA1AD5DA9F37112DCFE34D7328199B56B837416E74BB617D85A5683
6CD0F96CCAD7981AED5290C60FF29E811E41A533D73EBC13B1D1B65C089468A3
39380CD49731FA4BE5B1859BF38D1D43F55254E69835137D4D76F70773E0E32C
DC8F0BD084CAB3F139C944053E732F39A0A4CCB3EDD0C3AF1F22BD3E320EF1EE
35A0CE595241BCB90C42F7C4B5A77E9823979740C922EAC7A2C0C050D3A9B130
1BB1D9216B4123A9E26F420724C96592BB659EC77D76E4DD43AE6908BCB331A5
1C6AF28615867C616DDC025B272C527907FE1B9E03581F22C0D3662650136101
EEB555358453F57DEF56415D8344D6A015995764F5EFDB7BF68CB7B03187728A
F15BEF9E899F57F6C55861F746CAC89134F6F06A33825DA1BA039831A48247D0
D3AD709465AF5B294910E8352BFD49B28FAB9338530D7897A4C8B0E020D71A81
C043CC0B55C940EC8BAC4B0F000C5AA995ADE92B15AFD742E730D123549CBDBB
8C1EC91AC0FA666F6A4161E6593F9EF18C392EB3D3837EF582125213E7FFFE5B
26A1F268AC3845F05B18DC87CBA6F4A233184480098C1FCCB58DFFD988828D25
4B09ED15BFCB1DC55382255E271D25341EB5D5944B4CB33F3FB39C1F05FF8F31
AD72CE66A236B130104C51EAC4103E306FA637D7DEE6069A4B374D094CF26C6A
4389F682CAE39E3FE7D6CA5A279E67FB8F3A2C983379B9A6417E0FA68968EA05
CC0210BF41EE2C0A83E27D556C8D3738A31FE2D6B30559CC9CFD15D619907A67
C75B476C8DC81B428D176CE5F1FB422E145E494A3F0BA5F20F14171E8BF710B0
CE06F4D3F2D24B149F646433594A7B1228F79B17EE8C382DBA228F77990A4E31
67A14CFE770363C2306F84CB56870EA2BE9D0B1D1F3D34CEBAA0367AD8122171
76C9524D7CA2AB7B9C639CD9CC802AEDFADED006A51E702912B3A0DFAE6BB742
353ED44EF55B6EA85E04E1D8F46762375B3B86AEDB7569187C309ABE6CA45067
EFF01F68ADD5C966419F8812EECFCECAEC477FEAC89C119BA1288E16D641F9D9
DF5A133609AFC5A99A7C309A30088C81AA568BE2EA852A24362888BEE48914BE
9B2C48644413C2ED9D08485B33D73750E3061C2995BDC6932781CBA3526DD350
A3CEDE442B5692A3F822D01989A45B5543599CF3B1AF80D271D16D171A777BCC
CA0DACDF6D44B2916FBC4A18100AD02095C27EB6E7A80E31D1035763EDBA6300
500554145125FB0FA32E12005AEC917631CC3775581311E32DEF92D512FBC180
EB8EED1A6E86C3C3152BB2597F2F9C959B69947689ACEA304D22F458D7B85A6D
8626014DE6706B7BFC546B3B7A3B1EC6A97A3A52BC79F5F1CC09E48B6BDA41D4
3B0CE0E05B829D1BA989C743960428EC413FBF50B841774BC20AAD8F826FDE14
047075A8E61E672A6496DA97D96749677BCDEFC7989902475E6CE9C732AAA49C
E107C713A3CCE577FB02F903C70BB29D852EFCF3751A5D80A8849721E4E1B814
0FA566125E537B0D74451F41D6A821B48CC84D145A4DA48D36959C47B0218392
F24C93D7F9FC8D64DCE6F6F2414ACE57162F9F96CED4305F6E30A982C30AAA37
7B63DC721E0041BB3DDC3172FEA590380549E139F50A57D27C9846CC090E752D
CD752DDA1BA07D21852C793AE25CD143ED4B9C0145E452A23171A224ABA4D376
DCD2180EB705E12A9EAA132BF1BDA87D16BAAE317BE5739E80D31EE3902D9683
ADA479FE08929D2CEF858CDA92625462E39BB855E9BD68C4C0728A5B37F88F7B
480E1F05A9D62DBDCA5EB57C81832D2CC5364AB5A96EFAF6456635DB52429A85
CD87315FB8A92800C51F9FC7B77051DC44AEB1783E9549B6E792B1FBA53AFFEF
94FD342BC48C69E40C25335BBB3DEFDB921C06631391F1AC277998D06273B1E7
A2957E67CA84AA8088DC63B665CA594A4AEEAF70B0CB5682C58509CC2E624EF3
21A61AA16496DC066E2BBD8AA72F7DB38EC5ED87245EF8D5156F2043E9B5773A
41B03FC0FD52500E8D21D81154899B9DF267A462621B72A11770D4FAD1B1B8D4
D0F6BBFD2C717646CFED938DF330C7855C59CF9E782CFB09DF52F10FD3856029
CCD92E2D2C05B69E55969AE74CD3A31D6E5204F3689196C1C930845EE4C7FF49
F8DD75F69BE6EB53C053EB516C056DB1128C18525BEA63320AFCBD2264DAD869
AE74CF9C9DA2B907EEDACF343D45AAD7343611484DA293AAA585CB4AF57E5768
F7A33721F57F5078269AB6FD7773B7903DD21E0A07B0EAFA0E62E3C5C7DC3E6E
59F094724C4D656385640D6A50E13CB5882660FBA08F37556AF6A4D090CADC6D
04D198B7D05743D177BFD9F59DA560813F512F7773C3A4A1F608170C7495FE5D
38AA49D69F2E0D324031A294D4D2B215ED1CE30F1F7C6B6F138BB9151166441D
0810FDE9DCBEF4364CDB2C949B059C03E58871F4758568186EFDDEE0B8861366
676CC4646C7F7F1287481F2E70CC9CBDAE7D8DD4C07674A330E9B2CF466BAB19
DD384716EB4E2A8CDC02748CEBB95AED2171AF9BEC4B38BBFB53D8DAF4C49D81
66B6ACB83E0F1A31B348EAEFA7F2F84516D7F9086314091D44AF11D6B7103C43
2EDAEC187683DC457A34A0A2B79BDE233333A5A7BC4EB45FBD56943368A9554B
60AADACA271EFB45D62DF6261A6C8FF460396E8C18D2A8ECE2B7374827AEC779
41DCE30415BA64B1F2839010C8730CE529E01F8E42C2773CE38E1EC3CDED4D1D
4B00055217F6FE8FB7CAABA1C66787220FEFAB51BA25F77DFA446A4B4D71C241
B188459F8F6EB979E9A19619D2A79C85F3ACA34DF2781BA22C754602F81E97BA
D9B89049551A205DCAB24AD7428B4759FC17FDB9BD120EC1132ACAABB0AE8919
FB8E17DFF35C7AB889A4BD9F1C63B57E0A02D1CC8BB919D4595777170D59B45E
BD129F4324CB09BE0B28114E5B0A02ABEDDBD5B4FEC1609593024670DFA501D9
987577AB07A0788B783320EB3D984A2AFD783AE0663F5D9B813023A8A17969F8
EA92F5C883A8D0A797DE1C65FC2474976B9838EB24D0C81568D0CFD381D35CEF
E1EDDF11490315CDF6C7BA35893FFFBD50E61382C2ECD38E4D6DE9B137B15DBA
4F7BC2BE58CB668E9EF1C08A8CFEAA7534E88BFC1090813045FDABD1405FB721
27C3F5F10079E264E8E2FF4CE0DF2A9F64B53C63B473C3AF8053C77FAD42B0D5
F7F4419D02843EAE6DFD68E348505D9285B805966ED5439A19411DAF8A028730
5E5D00FE00F33C10C023A0C4DEB59C9BAAF70734B537AC21C82680075A3C1243
3F8C27E6D5AF2E569AB4E52F40E20DC49C3841621403EA8A4D74DC7430D9903F
CD797F12A43AADF2A32EB4CE1A07F2A468AB0C82B2FB022AC985067ACA94D9E5
B51384312B85F62225CE39A09970D188C8070F42A215DE07DE00F06A5039828C
27A92AC383B5099BB69BF12ABD1E020C90C1D1F3E1AB8A4EF838753FFD290D4B
B9919EA15C786685D1D9AB6EF168E0418FC541EDBE6FFAEC11AD76F4ECAC148D
F6B7B7DA6656C30B028CF2C6F7B94B863BA4C0F73E7C04B18178FD4FB3E2BEF9
F847E30932EC89D76F7AB711C0067AC834628A0D910BDC235FFF9FBBAEB2A7A0
2BC29585F8DCB050B0A0FA9FBDFF8B7B1F0BFC437AE367F25240C6262FCDFDB6
073730B9DCC27A7C82DF23318C49727173A332B3577ECB56808E5480693E4A36
63E90DD5AE110A9C61177713107F77A03DF957E26A39665F4E8A27F5E39760B3
F241129C9FA4F905133C99EEB965B81D04B780F1786FC6A9ECB0795AF0DFD45B
D2F275904235A0D5AD90E5D8CD037468DD078F52AA27290AD42AE11F312367AF
7CC0B64E45EC28F987BF2696DA217EE28C3030DB92FD4781BDCC4EDECCDD2179
E7577A5F47D9195F78C4F9FFD1EFD4EB1E17E19A8EDE4B8D2EC13F785225ADD6
3523E1E6CB8242C0AEA7914BBEB69EC6D86089313272183BFDF418413412BD21
5FDDA739BF1DF053DF247C9461744EB7E46E9D4D0AECF203E5A04A8A75289875
D127E453A0E29B10E44382E4C91AA1F4E87F1F184FF7AE70B812253C8013E6D0
4D5305DD542914CB1C34F6D2C9853435A8BFA240F78CB42DB23A3E9705E25FAA
CC2FB4752CD47416FF88B324BAE55414AEE91447B9FECCCC8A17F9D337F7ADA5
E168AA36A0107B983B1A42123A4779F20D4C0D9F40F921396D9C48904F2F0014
040F6FE5BA7996E8F07BF55A5AB1D0F47E0518A4EFAF69332A2F8DFC020A829B
2E6A2BCA52BCC7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 2074 600 600 (03-comp-aspects-kd.dvi)
@start /Fa 134[52 2[52 52 29 40 34 2[52 52 1[29 52 1[29
52 52 1[46 1[46 52 46 12[63 3[57 6[34 26[26 46[{
 TeXBase1Encoding ReEncodeFont }21 103.313 /NimbusRomNo9L-Regu
rf /Fb 158[43 97[{ TeXBase1Encoding ReEncodeFont }1 86.0938
/NimbusRomNo9L-ReguItal rf /Fc 158[52 97[{
 TeXBase1Encoding ReEncodeFont }1 103.313 /NimbusRomNo9L-ReguItal
rf /Fd 138[77 38 69 13[77 2[77 98[{ TeXBase1Encoding ReEncodeFont }5
137.75 /NimbusSanL-ReguItal rf /Fe 137[72 72 72 72 72
1[72 2[72 72 2[72 2[72 72 72 72 72 72 50[72 9[72 36[{
 TeXBase1Encoding ReEncodeFont }17 120.531 /NimbusMonL-Regu
rf /Ff 137[69 77 46 54 61 1[77 69 77 4[38 77 2[61 77
61 77 69 17[107 13[99 19[46 45[{ TeXBase1Encoding ReEncodeFont }18
137.75 /NimbusRomNo9L-Medi rf /Fg 103[62 30[62 2[62 62
62 62 62 1[62 62 62 62 62 62 1[62 62 62 62 62 62 62 62
62 3[62 1[62 3[62 1[62 62 1[62 4[62 62 5[62 62 6[62 62
62 1[62 2[62 1[62 62 62 62 62 62 1[62 62 62 2[62 62 3[62
1[62 34[{ TeXBase1Encoding ReEncodeFont }50 103.313 /NimbusMonL-Regu
rf /Fh 105[43 37[43 57[43 43 43 43 43 43 2[22 46[{
 TeXBase1Encoding ReEncodeFont }9 86.0938 /NimbusRomNo9L-Regu
rf /Fi 133[69 69 69 99 69 77 38 69 46 1[77 77 77 115
31 69 31 31 77 77 38 77 77 69 77 77 9[130 92 3[99 3[99
115 3[38 99 107 1[92 99 1[92 92 1[77 4[38 2[77 5[77 77
1[38 46 38 2[46 46 31 39[{ TeXBase1Encoding ReEncodeFont }48
137.75 /NimbusSanL-Regu rf /Fj 134[238 2[238 262 143
238 2[262 262 262 381 119 2[119 1[262 143 238 262 238
1[238 19[357 1[309 5[286 309 309 309 309 65[{
 TeXBase1Encoding ReEncodeFont }24 428.403 /NimbusSanL-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -600 -600 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref and prosper packages)/Author ()/Keywords () /DOCINFO
pdfmark end
 -600 -600 a -600 -600
a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600 -600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817
a
SDict begin H.R end
 -1211 -1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600 -600 a -600 6000 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 6000 a -600 6000 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600
6000 a 0 TeXcolorgray -600 6000 a
SDict begin [/PageMode /FullScreen/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -600 6000 a -600 6000
a
SDict begin [/CropBox [0 15 700 810] /PAGES pdfmark end
 -600 6000 a -600 6000 a
SDict begin [ {Catalog}<</ViewerPreferences<</FitWindow true/CenterWindow
true>>>> /PUT pdfmark end
 -600 6000 a -600 6000 a
SDict begin H.S end
 -600
6000 a -600 6000 a
SDict begin 12 H.A end
 -600 6000 a -600 6000 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 6000
a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 4266 2282 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 19.49005 63.59189 67.85963 33.71643 .5
Frame  gsave false 1 0.0 0.0  gsave 1 0.812 0.004  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 27.88356 35.28156 76.96472 3.27222 .5
Frame  gsave false 1 0.0 0.0  gsave 0.2 0.2 0.8  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 39.97606 37.98459 11.8077 .5 Frame
 gsave false 1 0.0 0.0  gsave 1  setgray currentrgbcolor grestore gsave
1 0.22 0.224  setrgbcolor currentrgbcolor grestore 1000 1. 135. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 41.54118 70.70508 44.81297 -199.1692
.5 Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor
currentrgbcolor grestore gsave 1  setgray currentrgbcolor grestore
1000 1. 0. false tx@GradientDict begin GradientFill end grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 22.3355 14.51074 369.88567 11.23895 .5
Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial 5001 3450 a
SDict begin [ /Rotate 90 /PAGES pdfmark end
 5001
3450 a 5001 3450 a
SDict begin [ /Page 1/View [ /XYZ null null null ] /Title (Computational Aspects of KD)
/OUT pdfmark end
 5001 3450 a 0.2 0.2 0.6 TeXcolorrgb
0 TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 5932 1366 a Fj(Computational)
5932 1809 y(Aspects)119 b(of)g(KD)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 5394 2408 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 0.2 0.2 0.8  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0 TeXcolorgray 69 w Fi(Data)38
b(Access)p 0 TeXcolorgray 5587 2648 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 1 0.22 0.224  setrgbcolor  1. .setopacityalpha  fill  grestore
end


@endspecial 0 TeXcolorgray 69 w(read.csv)p 0 TeXcolorgray
5587 2888 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 1 0.22 0.224  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0
TeXcolorgray 69 w(wr)r(ite)n(.csv)p 0 TeXcolorgray 5587
3128 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 1 0.22 0.224  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0 TeXcolorgray
69 w(edit)p 0 TeXcolorgray 5394 3414 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 0.2 0.2 0.8  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0 TeXcolorgray 69 w(Visualization)p
0 TeXcolorgray 5587 3654 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 1 0.22 0.224  setrgbcolor  1. .setopacityalpha  fill  grestore
end


@endspecial 0 TeXcolorgray 69 w(scatter)f(plots)p 0
TeXcolorgray 5394 3941 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 0.2 0.2 0.8  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
0 TeXcolorgray 69 w(Data)h(Manipulation)p 0 TeXcolorgray
5587 4181 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 1 0.22 0.224  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0
TeXcolorgray 69 w(attr)r(ib)m(ute-or)r(iented)c(approach)p
0 TeXcolorgray 5587 4421 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 1 0.22 0.224  setrgbcolor  1. .setopacityalpha  fill  grestore
end


@endspecial 0 TeXcolorgray 69 w(obser)t(v)m(ation-or)r(iented)e
(approach)p 0 TeXcolorgray 5394 4707 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 0.2 0.2 0.8  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0 TeXcolorgray 69 w(Model)k(Building)f(and)i
(Ev)m(aluation)p 0 TeXcolorgray 5394 4994 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true -4.26773 7.11317 2.84544 0.28436 .5 Frame
 gsave 0.2 0.2 0.8  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial 0 TeXcolorgray 69 w(Model)f(Deplo)l(yment)p
0 TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 10546 5736 a Fh(\226)22
b(p.)f(1)p 0 TeXcolorgray 4500 6000 a
tx@Dict begin -90 Rot  end
 4500 6000 a eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211
-1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 4266 2282 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 19.49005 63.59189 67.85963 33.71643 .5
Frame  gsave false 1 0.0 0.0  gsave 1 0.812 0.004  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 27.88356 35.28156 76.96472 3.27222 .5
Frame  gsave false 1 0.0 0.0  gsave 0.2 0.2 0.8  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 39.97606 37.98459 11.8077 .5 Frame
 gsave false 1 0.0 0.0  gsave 1  setgray currentrgbcolor grestore gsave
1 0.22 0.224  setrgbcolor currentrgbcolor grestore 1000 1. 135. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 41.54118 70.70508 44.81297 -199.1692
.5 Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor
currentrgbcolor grestore gsave 1  setgray currentrgbcolor grestore
1000 1. 0. false tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 22.3355 14.51074 369.88567 11.23895 .5
Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
5001 3450 a
SDict begin [ /Page 2/View [ /XYZ null null null ] /Title (Data Manipulation)
/OUT pdfmark end
 5001 3450 a 0.2 0.2 0.6 TeXcolorrgb 0 TeXcolorgray
0.2 0.2 0.6 TeXcolorrgb 5932 1809 a Fj(Data)119 b(Manipulation)p
0 TeXcolorgray 0 TeXcolorgray 5215 2447 a Fi(Recall)37
b(that)h(a)g(data)f(fr)o(ame)g(is)h(a)g(data)f(tab)m(le)g
(representation)e(in)i(R,)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 5463 2669 a Fg(>)62 b(mammals.df)5587
2811 y(Legs)g(Wings)124 b(Fur)62 b(Feathers)f(Mammal)5463
2953 y(1)248 b(4)g(no)124 b(yes)433 b(no)186 b(true)5463
3096 y(2)248 b(2)186 b(yes)g(no)371 b(yes)124 b(false)5463
3238 y(3)248 b(4)g(no)186 b(no)433 b(no)124 b(false)5463
3380 y(4)248 b(4)186 b(yes)124 b(yes)433 b(no)186 b(true)5463
3522 y(5)248 b(3)g(no)186 b(no)433 b(no)124 b(false)p
0 TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 10546 5736 a Fh(\226)22
b(p.)f(2)p 0 TeXcolorgray 4500 6000 a
tx@Dict begin -90 Rot  end
 4500 6000 a eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211
-1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 4266 2282 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 19.49005 63.59189 67.85963 33.71643 .5
Frame  gsave false 1 0.0 0.0  gsave 1 0.812 0.004  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 27.88356 35.28156 76.96472 3.27222 .5
Frame  gsave false 1 0.0 0.0  gsave 0.2 0.2 0.8  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 39.97606 37.98459 11.8077 .5 Frame
 gsave false 1 0.0 0.0  gsave 1  setgray currentrgbcolor grestore gsave
1 0.22 0.224  setrgbcolor currentrgbcolor grestore 1000 1. 135. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 41.54118 70.70508 44.81297 -199.1692
.5 Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor
currentrgbcolor grestore gsave 1  setgray currentrgbcolor grestore
1000 1. 0. false tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 22.3355 14.51074 369.88567 11.23895 .5
Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
5001 3450 a
SDict begin [ /Page 3/View [ /XYZ null null null ] /Title (Data Manipulation)
/OUT pdfmark end
 5001 3450 a 0.2 0.2 0.6 TeXcolorrgb 0 TeXcolorgray
0.2 0.2 0.6 TeXcolorrgb 5932 1809 a Fj(Data)119 b(Manipulation)p
0 TeXcolorgray 0 TeXcolorgray 5215 2441 a Ff(Attrib)m(ute-oriented)34
b(A)m(ppr)n(oach)5215 2660 y Fi(W)l(e)k(can)f(access)g(an)n(y)g(attr)r
(ib)m(ute)g(in)h(the)g(mammals)e(data)h(fr)o(ame)g(with)h(the)g
Fe($)h Fi(notation.)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 5463 2881 a Fg(>)62 b(mammals.df$Legs)5463
3023 y([1])g(4)g(2)g(4)g(4)g(3)5463 3166 y(>)g(mammals.df$Mammal)5463
3308 y([1])124 b(true)186 b(false)123 b(false)h(true)186
b(false)5463 3450 y(Levels:)124 b(false)g(true)5215 3672
y Fi(R)39 b(allo)n(ws)d(us)i(to)g(select)f(g)o(roups)f(of)j(attr)r(ib)m
(utes)e(with)h(the)g Fe(subset)i Fi(function,)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 5463 3893
a Fg(>)62 b(subset\(mammals.df,)f(select=Fur:Mammal\))5649
4035 y(Fur)h(Feathers)g(Mammal)5463 4177 y(1)124 b(yes)434
b(no)186 b(true)5463 4320 y(2)g(no)372 b(yes)124 b(false)5463
4462 y(3)186 b(no)434 b(no)124 b(false)5463 4604 y(4)g(yes)434
b(no)186 b(true)5463 4746 y(5)g(no)434 b(no)124 b(false)5463
4889 y(>)62 b(subset\(mammals.df,)f(select=-Mammal\))5587
5031 y(Legs)h(Wings)124 b(Fur)62 b(Feathers)5463 5173
y(1)248 b(4)g(no)124 b(yes)433 b(no)5463 5315 y(2)248
b(2)186 b(yes)g(no)371 b(yes)5463 5457 y(3)248 b(4)g(no)186
b(no)433 b(no)5463 5600 y(4)248 b(4)186 b(yes)124 b(yes)433
b(no)5463 5742 y(5)248 b(3)g(no)186 b(no)433 b(no)p 0
TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 10546 5736 a Fh(\226)22
b(p.)f(3)p 0 TeXcolorgray 4500 6000 a
tx@Dict begin -90 Rot  end
 4500 6000 a eop
end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211
-1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 4266 2282 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 19.49005 63.59189 67.85963 33.71643 .5
Frame  gsave false 1 0.0 0.0  gsave 1 0.812 0.004  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 27.88356 35.28156 76.96472 3.27222 .5
Frame  gsave false 1 0.0 0.0  gsave 0.2 0.2 0.8  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 39.97606 37.98459 11.8077 .5 Frame
 gsave false 1 0.0 0.0  gsave 1  setgray currentrgbcolor grestore gsave
1 0.22 0.224  setrgbcolor currentrgbcolor grestore 1000 1. 135. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 41.54118 70.70508 44.81297 -199.1692
.5 Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor
currentrgbcolor grestore gsave 1  setgray currentrgbcolor grestore
1000 1. 0. false tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 22.3355 14.51074 369.88567 11.23895 .5
Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
5001 3450 a
SDict begin [ /Page 4/View [ /XYZ null null null ] /Title (Data Manipulation)
/OUT pdfmark end
 5001 3450 a 0.2 0.2 0.6 TeXcolorrgb 0 TeXcolorgray
0.2 0.2 0.6 TeXcolorrgb 5932 1809 a Fj(Data)119 b(Manipulation)p
0 TeXcolorgray 0 TeXcolorgray 5215 2441 a Ff(Obser)o(v)o
(ation-oriented)32 b(A)m(ppr)n(oach)5215 2706 y Fi(W)l(e)38
b(can)f(use)g(the)h Fd(subset)50 b Fi(function)36 b(also)h(f)l(or)h
(obser)t(v)m(ation-or)r(iented)33 b(data)k(manipulation.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
5463 2928 a Fg(>)62 b(subset\(mammals.df,)f(Legs)h(==)g(4\))5587
3070 y(Legs)g(Wings)124 b(Fur)62 b(Feathers)f(Mammal)5463
3212 y(1)248 b(4)g(no)124 b(yes)433 b(no)186 b(true)5463
3354 y(3)248 b(4)g(no)186 b(no)433 b(no)124 b(false)5463
3496 y(4)248 b(4)186 b(yes)124 b(yes)433 b(no)186 b(true)5215
3769 y Fi(Another)-7 b(,)37 b(slightly)f(more)h(complicated)e(e)l
(xample)n(,)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 5463 3990 a Fg(>)62 b(mammal.levels)g(<-)f
(levels\(mammals.df$Mammal\))5463 4132 y(>)h(mammal.levels)5463
4275 y([1])g("false")g("true")5463 4417 y(>)g(true.level)g(<-)g
(mammal.levels[2])5463 4559 y(>)g(subset\(mammals.df,)f(Mammal)h(==)g
(true.level\))5587 4701 y(Legs)g(Wings)g(Fur)g(Feathers)f(Mammal)5463
4844 y(1)248 b(4)g(no)62 b(yes)433 b(no)186 b(true)5463
4986 y(4)248 b(4)186 b(yes)62 b(yes)433 b(no)186 b(true)p
0 TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 10546 5736 a Fh(\226)22
b(p.)f(4)p 0 TeXcolorgray 4500 6000 a
tx@Dict begin -90 Rot  end
 4500 6000 a eop
end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211
-1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 4266 2282 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 19.49005 63.59189 67.85963 33.71643 .5
Frame  gsave false 1 0.0 0.0  gsave 1 0.812 0.004  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 27.88356 35.28156 76.96472 3.27222 .5
Frame  gsave false 1 0.0 0.0  gsave 0.2 0.2 0.8  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 39.97606 37.98459 11.8077 .5 Frame
 gsave false 1 0.0 0.0  gsave 1  setgray currentrgbcolor grestore gsave
1 0.22 0.224  setrgbcolor currentrgbcolor grestore 1000 1. 135. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 41.54118 70.70508 44.81297 -199.1692
.5 Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor
currentrgbcolor grestore gsave 1  setgray currentrgbcolor grestore
1000 1. 0. false tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 22.3355 14.51074 369.88567 11.23895 .5
Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
5001 3450 a
SDict begin [ /Page 5/View [ /XYZ null null null ] /Title (Model Building and Evaluation)
/OUT pdfmark end
 5001 3450 a 0.2 0.2 0.6 TeXcolorrgb 0 TeXcolorgray
0.2 0.2 0.6 TeXcolorrgb 5932 1443 a Fj(Model)118 b(Building)h(and)5932
1892 y(Ev)-9 b(aluation)p 0 TeXcolorgray 0 TeXcolorgray
5215 2447 a Fi(W)l(e)38 b(use)f(the)h(libr)o(ar)t(y)e('e1071')f
(\(don't)i(ask)h(:\))47 b(f)l(or)38 b(b)m(uilding)d(suppor)6
b(t)36 b(v)m(ector)h(machine)f(models)n(.)10316 2447
y
SDict begin H.S end
 10316 2447 a -48 x Fc(a)10376 2447 y
SDict begin 11.20993 H.L end
 10376 2447 a 10376
2447 a
SDict begin [/Subtype /Link/Dest (Hfootnote.1) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 10376 2447 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 5463 2669 a Fg(>)62 b(library\(e1071\))5215
2890 y Fi(No)n(w)39 b(w)o(e)e(can)h(constr)r(uct)f(a)h(suppor)6
b(t)36 b(v)m(ector)h(machine)f(model)g(of)i(our)g(mammals)e(data)h
(with)h(the)5215 3038 y Fe(svm)h Fi(function,)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 5463 3259
a Fg(>)62 b(model<-svm\(Mammal)f(\230)h
(.,data=mammals.df,kernel="linear"\))5215 3532 y Fi(At)38
b(this)g(point)f(w)o(e)h(can)f(e)l(v)m(aluate)f(our)h(model)f(b)m(y)i
(chec)m(king)e(ho)n(w)i(it)g(perf)l(or)s(ms)f(on)h(the)g(tr)o(aining)d
(set.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 5463 3753 a Fg(>)62 b(mammals.df$Mammal)f(==)h
(fitted\(model\))5463 3895 y([1])g(TRUE)g(TRUE)g(TRUE)f(TRUE)h(TRUE)p
0 TeXcolorgray 0 TeXcolorgray 5215 5269 2156 7 v 5349
5356 a Fb(a)5401 5400 y
SDict begin H.S end
 5401 5400 a 5401 5400 a
SDict begin H.R end
 5401
5400 a 5401 5400 a
SDict begin [/View [/XYZ H.V]/Dest (Hfootnote.1) cvn /DEST pdfmark
end
 5401 5400 a Fa(The)25 b(library)g(is)h(a)n(v)m
(ailable)e(through)h(the)g(P)n(ackage)g(Installer)-6
b(.)p 0 TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 10546 5736
a Fh(\226)22 b(p.)f(5)p 0 TeXcolorgray 4500 6000 a
tx@Dict begin -90 Rot  end
 4500
6000 a eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1817 a
SDict begin H.S end
 -1211 -1817 a -1211 -1817 a
SDict begin H.R end
 -1211
-1817 a -1211 -1817 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -1211 -1817 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4500 6000 a
tx@Dict begin 90 Rot  end
 4500 6000 a 4266 2282 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 19.49005 63.59189 67.85963 33.71643 .5
Frame  gsave false 1 0.0 0.0  gsave 1 0.812 0.004  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 27.88356 35.28156 76.96472 3.27222 .5
Frame  gsave false 1 0.0 0.0  gsave 0.2 0.2 0.8  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 39.97606 37.98459 11.8077 .5 Frame
 gsave false 1 0.0 0.0  gsave 1  setgray currentrgbcolor grestore gsave
1 0.22 0.224  setrgbcolor currentrgbcolor grestore 1000 1. 135. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 41.54118 70.70508 44.81297 -199.1692
.5 Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor
currentrgbcolor grestore gsave 1  setgray currentrgbcolor grestore
1000 1. 0. false tx@GradientDict begin GradientFill end grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 22.3355 14.51074 369.88567 11.23895 .5
Frame  gsave false 1 0.0 0.0  gsave 0.11 0.11 0.11  setrgbcolor currentrgbcolor
grestore gsave 1  setgray currentrgbcolor grestore 1000 1. 90. false
tx@GradientDict begin GradientFill end grestore end
 
@endspecial
5001 3450 a
SDict begin [ /Page 6/View [ /XYZ null null null ] /Title (Model Deployment)
/OUT pdfmark end
 5001 3450 a 0.2 0.2 0.6 TeXcolorrgb 0 TeXcolorgray
0.2 0.2 0.6 TeXcolorrgb 5932 1809 a Fj(Model)118 b(Deplo)-9
b(yment)p 0 TeXcolorgray 0 TeXcolorgray 5215 2444 a Fi(Model)36
b(deplo)l(yment)f(means)i(applying)e(y)m(our)j(model)e(in)i(an)f
(appropr)r(iate)e(conte)l(xt.)47 b(In)38 b(R)h(w)o(e)f(use)5215
2637 y(the)g Fe(predict)i Fi(function)d(to)h(compute)e(the)i(v)m(alue)e
(of)i(the)g(dependent)e(attr)r(ib)m(ute)h(f)l(or)h(some)f(object.)5215
2830 y(Giv)m(en)f(that)i(R)h(is)f(a)g(prog)o(r)o(amming)c(language)h(w)
o(e)j(could)e(prog)o(r)o(am)g(appropr)r(iate)f(functionality)5215
3023 y(around)h(the)i(predict)e(function.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 5463 3245
a Fg(>)62 b(independent.df)g(<-)f(subset\(mammals.df,)h
(select=-Mammal\))5463 3387 y(>)g(predict\(model,)g(independent.df\))
5773 3529 y(1)372 b(2)f(3)h(4)g(5)5587 3672 y(true)124
b(false)g(false)185 b(true)124 b(false)5463 3814 y(Levels:)g(false)g
(true)5215 4086 y Fi(Ho)n(w)39 b(could)d(w)o(e)i(test)g(in)g(R)h
(whether)e(these)g(predictions)e(are)j(correct)f(with)h(respect)f(to)h
(the)g(or)r(iginal)5215 4279 y(data)f(set)h Fe(mammals.df)p
Fi(?)p 0 TeXcolorgray 0.2 0.2 0.6 TeXcolorrgb 10546 5736
a Fh(\226)22 b(p.)f(6)p 0 TeXcolorgray 4500 6000 a
tx@Dict begin -90 Rot  end
 4500
6000 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
